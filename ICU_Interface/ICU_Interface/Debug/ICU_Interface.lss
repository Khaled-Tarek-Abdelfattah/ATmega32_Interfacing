
ICU_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000712  000007a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  000007aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f50  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c73  00000000  00000000  000028e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f14  00000000  00000000  0000355b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  00004470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a92  00000000  00000000  0000472c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010fa  00000000  00000000  000051be  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  000062b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_6>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	b9 02       	muls	r27, r25
  56:	c8 02       	muls	r28, r24
  58:	d7 02       	muls	r29, r23
  5a:	e6 02       	muls	r30, r22
  5c:	f5 02       	muls	r31, r21
  5e:	03 03       	mulsu	r16, r19
  60:	11 03       	mulsu	r17, r17
  62:	1f 03       	fmul	r17, r23

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e1       	ldi	r30, 0x12	; 18
  78:	f7 e0       	ldi	r31, 0x07	; 7
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a4 e6       	ldi	r26, 0x64	; 100
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a6 36       	cpi	r26, 0x66	; 102
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 6e 02 	call	0x4dc	; 0x4dc <main>
  9a:	0c 94 87 03 	jmp	0x70e	; 0x70e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <LCD_SendInstruction>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
  a6:	40 e0       	ldi	r20, 0x00	; 0
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	88 e3       	ldi	r24, 0x38	; 56
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	62 e0       	ldi	r22, 0x02	; 2
  b6:	88 e3       	ldi	r24, 0x38	; 56
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	88 e3       	ldi	r24, 0x38	; 56
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
  ca:	8f e3       	ldi	r24, 0x3F	; 63
  cc:	9f e1       	ldi	r25, 0x1F	; 31
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_SendInstruction+0x2c>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_SendInstruction+0x32>
  d4:	00 00       	nop
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8b bb       	out	0x1b, r24	; 27
  dc:	8b b3       	in	r24, 0x1b	; 27
  de:	9c 2f       	mov	r25, r28
  e0:	90 7f       	andi	r25, 0xF0	; 240
  e2:	89 2b       	or	r24, r25
  e4:	8b bb       	out	0x1b, r24	; 27
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	9f e1       	ldi	r25, 0x1F	; 31
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <LCD_SendInstruction+0x48>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <LCD_SendInstruction+0x4e>
  f0:	00 00       	nop
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	63 e0       	ldi	r22, 0x03	; 3
  f6:	88 e3       	ldi	r24, 0x38	; 56
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
  fe:	8f e3       	ldi	r24, 0x3F	; 63
 100:	9f e1       	ldi	r25, 0x1F	; 31
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_SendInstruction+0x60>
 106:	00 c0       	rjmp	.+0      	; 0x108 <LCD_SendInstruction+0x66>
 108:	00 00       	nop
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	88 e3       	ldi	r24, 0x38	; 56
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	9f e1       	ldi	r25, 0x1F	; 31
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_SendInstruction+0x78>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_SendInstruction+0x7e>
 120:	00 00       	nop
 122:	8b b3       	in	r24, 0x1b	; 27
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	8b bb       	out	0x1b, r24	; 27
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	c2 95       	swap	r28
 12c:	c0 7f       	andi	r28, 0xF0	; 240
 12e:	c8 2b       	or	r28, r24
 130:	cb bb       	out	0x1b, r28	; 27
 132:	8f e3       	ldi	r24, 0x3F	; 63
 134:	9f e1       	ldi	r25, 0x1F	; 31
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_SendInstruction+0x94>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_SendInstruction+0x9a>
 13c:	00 00       	nop
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	63 e0       	ldi	r22, 0x03	; 3
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 14a:	8f e3       	ldi	r24, 0x3F	; 63
 14c:	9f e1       	ldi	r25, 0x1F	; 31
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_SendInstruction+0xac>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_SendInstruction+0xb2>
 154:	00 00       	nop
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <LCD_CharDisplay>:
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	88 e3       	ldi	r24, 0x38	; 56
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	88 e3       	ldi	r24, 0x38	; 56
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 176:	41 e0       	ldi	r20, 0x01	; 1
 178:	63 e0       	ldi	r22, 0x03	; 3
 17a:	88 e3       	ldi	r24, 0x38	; 56
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 182:	8f e3       	ldi	r24, 0x3F	; 63
 184:	9f e1       	ldi	r25, 0x1F	; 31
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <LCD_CharDisplay+0x2c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <LCD_CharDisplay+0x32>
 18c:	00 00       	nop
 18e:	8b b3       	in	r24, 0x1b	; 27
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	8b bb       	out	0x1b, r24	; 27
 194:	8b b3       	in	r24, 0x1b	; 27
 196:	9c 2f       	mov	r25, r28
 198:	90 7f       	andi	r25, 0xF0	; 240
 19a:	89 2b       	or	r24, r25
 19c:	8b bb       	out	0x1b, r24	; 27
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_CharDisplay+0x48>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_CharDisplay+0x4e>
 1a8:	00 00       	nop
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	63 e0       	ldi	r22, 0x03	; 3
 1ae:	88 e3       	ldi	r24, 0x38	; 56
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 1b6:	8f e3       	ldi	r24, 0x3F	; 63
 1b8:	9f e1       	ldi	r25, 0x1F	; 31
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <LCD_CharDisplay+0x60>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <LCD_CharDisplay+0x66>
 1c0:	00 00       	nop
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	63 e0       	ldi	r22, 0x03	; 3
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 1ce:	8f e3       	ldi	r24, 0x3F	; 63
 1d0:	9f e1       	ldi	r25, 0x1F	; 31
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <LCD_CharDisplay+0x78>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <LCD_CharDisplay+0x7e>
 1d8:	00 00       	nop
 1da:	8b b3       	in	r24, 0x1b	; 27
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	8b bb       	out	0x1b, r24	; 27
 1e0:	8b b3       	in	r24, 0x1b	; 27
 1e2:	c2 95       	swap	r28
 1e4:	c0 7f       	andi	r28, 0xF0	; 240
 1e6:	c8 2b       	or	r28, r24
 1e8:	cb bb       	out	0x1b, r28	; 27
 1ea:	8f e3       	ldi	r24, 0x3F	; 63
 1ec:	9f e1       	ldi	r25, 0x1F	; 31
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_CharDisplay+0x94>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_CharDisplay+0x9a>
 1f4:	00 00       	nop
 1f6:	40 e0       	ldi	r20, 0x00	; 0
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 ac 02 	call	0x558	; 0x558 <DioChannelWrite>
 202:	8f e3       	ldi	r24, 0x3F	; 63
 204:	9f e1       	ldi	r25, 0x1F	; 31
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_CharDisplay+0xac>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_CharDisplay+0xb2>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_UnsignedIntegerDisplay>:
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	4b 01       	movw	r8, r22
 22c:	5c 01       	movw	r10, r24
 22e:	60 31       	cpi	r22, 0x10	; 16
 230:	27 e2       	ldi	r18, 0x27	; 39
 232:	72 07       	cpc	r23, r18
 234:	81 05       	cpc	r24, r1
 236:	91 05       	cpc	r25, r1
 238:	68 f0       	brcs	.+26     	; 0x254 <LCD_UnsignedIntegerDisplay+0x42>
 23a:	20 e1       	ldi	r18, 0x10	; 16
 23c:	37 e2       	ldi	r19, 0x27	; 39
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>
 246:	02 2f       	mov	r16, r18
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	80 e3       	ldi	r24, 0x30	; 48
 24c:	82 0f       	add	r24, r18
 24e:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_CharDisplay>
 252:	02 c0       	rjmp	.+4      	; 0x258 <LCD_UnsignedIntegerDisplay+0x46>
 254:	00 e0       	ldi	r16, 0x00	; 0
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	38 ee       	ldi	r19, 0xE8	; 232
 25a:	83 16       	cp	r8, r19
 25c:	33 e0       	ldi	r19, 0x03	; 3
 25e:	93 06       	cpc	r9, r19
 260:	a1 04       	cpc	r10, r1
 262:	b1 04       	cpc	r11, r1
 264:	f0 f0       	brcs	.+60     	; 0x2a2 <LCD_UnsignedIntegerDisplay+0x90>
 266:	20 e1       	ldi	r18, 0x10	; 16
 268:	37 e2       	ldi	r19, 0x27	; 39
 26a:	02 9f       	mul	r16, r18
 26c:	c0 01       	movw	r24, r0
 26e:	03 9f       	mul	r16, r19
 270:	90 0d       	add	r25, r0
 272:	12 9f       	mul	r17, r18
 274:	90 0d       	add	r25, r0
 276:	11 24       	eor	r1, r1
 278:	a5 01       	movw	r20, r10
 27a:	94 01       	movw	r18, r8
 27c:	28 1b       	sub	r18, r24
 27e:	39 0b       	sbc	r19, r25
 280:	41 09       	sbc	r20, r1
 282:	51 09       	sbc	r21, r1
 284:	ca 01       	movw	r24, r20
 286:	b9 01       	movw	r22, r18
 288:	28 ee       	ldi	r18, 0xE8	; 232
 28a:	33 e0       	ldi	r19, 0x03	; 3
 28c:	40 e0       	ldi	r20, 0x00	; 0
 28e:	50 e0       	ldi	r21, 0x00	; 0
 290:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>
 294:	e2 2e       	mov	r14, r18
 296:	f1 2c       	mov	r15, r1
 298:	80 e3       	ldi	r24, 0x30	; 48
 29a:	82 0f       	add	r24, r18
 29c:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_CharDisplay>
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <LCD_UnsignedIntegerDisplay+0x94>
 2a2:	e1 2c       	mov	r14, r1
 2a4:	f1 2c       	mov	r15, r1
 2a6:	34 e6       	ldi	r19, 0x64	; 100
 2a8:	83 16       	cp	r8, r19
 2aa:	91 04       	cpc	r9, r1
 2ac:	a1 04       	cpc	r10, r1
 2ae:	b1 04       	cpc	r11, r1
 2b0:	68 f1       	brcs	.+90     	; 0x30c <LCD_UnsignedIntegerDisplay+0xfa>
 2b2:	20 e1       	ldi	r18, 0x10	; 16
 2b4:	37 e2       	ldi	r19, 0x27	; 39
 2b6:	02 9f       	mul	r16, r18
 2b8:	c0 01       	movw	r24, r0
 2ba:	03 9f       	mul	r16, r19
 2bc:	90 0d       	add	r25, r0
 2be:	12 9f       	mul	r17, r18
 2c0:	90 0d       	add	r25, r0
 2c2:	11 24       	eor	r1, r1
 2c4:	a5 01       	movw	r20, r10
 2c6:	94 01       	movw	r18, r8
 2c8:	28 1b       	sub	r18, r24
 2ca:	39 0b       	sbc	r19, r25
 2cc:	41 09       	sbc	r20, r1
 2ce:	51 09       	sbc	r21, r1
 2d0:	da 01       	movw	r26, r20
 2d2:	c9 01       	movw	r24, r18
 2d4:	48 ee       	ldi	r20, 0xE8	; 232
 2d6:	53 e0       	ldi	r21, 0x03	; 3
 2d8:	e4 9e       	mul	r14, r20
 2da:	90 01       	movw	r18, r0
 2dc:	e5 9e       	mul	r14, r21
 2de:	30 0d       	add	r19, r0
 2e0:	f4 9e       	mul	r15, r20
 2e2:	30 0d       	add	r19, r0
 2e4:	11 24       	eor	r1, r1
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	62 1b       	sub	r22, r18
 2ec:	73 0b       	sbc	r23, r19
 2ee:	81 09       	sbc	r24, r1
 2f0:	91 09       	sbc	r25, r1
 2f2:	24 e6       	ldi	r18, 0x64	; 100
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e0       	ldi	r20, 0x00	; 0
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>
 2fe:	c2 2e       	mov	r12, r18
 300:	d1 2c       	mov	r13, r1
 302:	80 e3       	ldi	r24, 0x30	; 48
 304:	82 0f       	add	r24, r18
 306:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_CharDisplay>
 30a:	02 c0       	rjmp	.+4      	; 0x310 <LCD_UnsignedIntegerDisplay+0xfe>
 30c:	c1 2c       	mov	r12, r1
 30e:	d1 2c       	mov	r13, r1
 310:	34 e6       	ldi	r19, 0x64	; 100
 312:	83 16       	cp	r8, r19
 314:	91 04       	cpc	r9, r1
 316:	a1 04       	cpc	r10, r1
 318:	b1 04       	cpc	r11, r1
 31a:	b8 f1       	brcs	.+110    	; 0x38a <LCD_UnsignedIntegerDisplay+0x178>
 31c:	20 e1       	ldi	r18, 0x10	; 16
 31e:	37 e2       	ldi	r19, 0x27	; 39
 320:	02 9f       	mul	r16, r18
 322:	c0 01       	movw	r24, r0
 324:	03 9f       	mul	r16, r19
 326:	90 0d       	add	r25, r0
 328:	12 9f       	mul	r17, r18
 32a:	90 0d       	add	r25, r0
 32c:	11 24       	eor	r1, r1
 32e:	a5 01       	movw	r20, r10
 330:	94 01       	movw	r18, r8
 332:	28 1b       	sub	r18, r24
 334:	39 0b       	sbc	r19, r25
 336:	41 09       	sbc	r20, r1
 338:	51 09       	sbc	r21, r1
 33a:	da 01       	movw	r26, r20
 33c:	c9 01       	movw	r24, r18
 33e:	48 ee       	ldi	r20, 0xE8	; 232
 340:	53 e0       	ldi	r21, 0x03	; 3
 342:	e4 9e       	mul	r14, r20
 344:	90 01       	movw	r18, r0
 346:	e5 9e       	mul	r14, r21
 348:	30 0d       	add	r19, r0
 34a:	f4 9e       	mul	r15, r20
 34c:	30 0d       	add	r19, r0
 34e:	11 24       	eor	r1, r1
 350:	82 1b       	sub	r24, r18
 352:	93 0b       	sbc	r25, r19
 354:	a1 09       	sbc	r26, r1
 356:	b1 09       	sbc	r27, r1
 358:	44 e6       	ldi	r20, 0x64	; 100
 35a:	4c 9d       	mul	r20, r12
 35c:	90 01       	movw	r18, r0
 35e:	4d 9d       	mul	r20, r13
 360:	30 0d       	add	r19, r0
 362:	11 24       	eor	r1, r1
 364:	bc 01       	movw	r22, r24
 366:	cd 01       	movw	r24, r26
 368:	62 1b       	sub	r22, r18
 36a:	73 0b       	sbc	r23, r19
 36c:	81 09       	sbc	r24, r1
 36e:	91 09       	sbc	r25, r1
 370:	2a e0       	ldi	r18, 0x0A	; 10
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	0e 94 5f 03 	call	0x6be	; 0x6be <__udivmodsi4>
 37c:	c2 2f       	mov	r28, r18
 37e:	d0 e0       	ldi	r29, 0x00	; 0
 380:	80 e3       	ldi	r24, 0x30	; 48
 382:	82 0f       	add	r24, r18
 384:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_CharDisplay>
 388:	02 c0       	rjmp	.+4      	; 0x38e <LCD_UnsignedIntegerDisplay+0x17c>
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	20 e1       	ldi	r18, 0x10	; 16
 390:	37 e2       	ldi	r19, 0x27	; 39
 392:	02 9f       	mul	r16, r18
 394:	c0 01       	movw	r24, r0
 396:	03 9f       	mul	r16, r19
 398:	90 0d       	add	r25, r0
 39a:	12 9f       	mul	r17, r18
 39c:	90 0d       	add	r25, r0
 39e:	11 24       	eor	r1, r1
 3a0:	a5 01       	movw	r20, r10
 3a2:	94 01       	movw	r18, r8
 3a4:	28 1b       	sub	r18, r24
 3a6:	39 0b       	sbc	r19, r25
 3a8:	41 09       	sbc	r20, r1
 3aa:	51 09       	sbc	r21, r1
 3ac:	da 01       	movw	r26, r20
 3ae:	c9 01       	movw	r24, r18
 3b0:	48 ee       	ldi	r20, 0xE8	; 232
 3b2:	53 e0       	ldi	r21, 0x03	; 3
 3b4:	e4 9e       	mul	r14, r20
 3b6:	90 01       	movw	r18, r0
 3b8:	e5 9e       	mul	r14, r21
 3ba:	30 0d       	add	r19, r0
 3bc:	f4 9e       	mul	r15, r20
 3be:	30 0d       	add	r19, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	82 1b       	sub	r24, r18
 3c4:	93 0b       	sbc	r25, r19
 3c6:	a1 09       	sbc	r26, r1
 3c8:	b1 09       	sbc	r27, r1
 3ca:	44 e6       	ldi	r20, 0x64	; 100
 3cc:	4c 9d       	mul	r20, r12
 3ce:	90 01       	movw	r18, r0
 3d0:	4d 9d       	mul	r20, r13
 3d2:	30 0d       	add	r19, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	82 1b       	sub	r24, r18
 3d8:	93 0b       	sbc	r25, r19
 3da:	a1 09       	sbc	r26, r1
 3dc:	b1 09       	sbc	r27, r1
 3de:	9e 01       	movw	r18, r28
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	cc 0f       	add	r28, r28
 3e6:	dd 1f       	adc	r29, r29
 3e8:	cc 0f       	add	r28, r28
 3ea:	dd 1f       	adc	r29, r29
 3ec:	cc 0f       	add	r28, r28
 3ee:	dd 1f       	adc	r29, r29
 3f0:	c2 0f       	add	r28, r18
 3f2:	d3 1f       	adc	r29, r19
 3f4:	8c 1b       	sub	r24, r28
 3f6:	9d 0b       	sbc	r25, r29
 3f8:	a1 09       	sbc	r26, r1
 3fa:	b1 09       	sbc	r27, r1
 3fc:	80 5d       	subi	r24, 0xD0	; 208
 3fe:	0e 94 ad 00 	call	0x15a	; 0x15a <LCD_CharDisplay>
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	ff 90       	pop	r15
 40c:	ef 90       	pop	r14
 40e:	df 90       	pop	r13
 410:	cf 90       	pop	r12
 412:	bf 90       	pop	r11
 414:	af 90       	pop	r10
 416:	9f 90       	pop	r9
 418:	8f 90       	pop	r8
 41a:	08 95       	ret

0000041c <LCD_Clear>:
	LCD_SendInstruction(Shift_Display_Right);
	_delay_ms(2);
}

void LCD_Clear(){
	LCD_SendInstruction(Clear_Display);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_SendInstruction>
 422:	08 95       	ret

00000424 <LCD_init>:
 424:	2f ef       	ldi	r18, 0xFF	; 255
 426:	81 ee       	ldi	r24, 0xE1	; 225
 428:	94 e0       	ldi	r25, 0x04	; 4
 42a:	21 50       	subi	r18, 0x01	; 1
 42c:	80 40       	sbci	r24, 0x00	; 0
 42e:	90 40       	sbci	r25, 0x00	; 0
 430:	e1 f7       	brne	.-8      	; 0x42a <LCD_init+0x6>
 432:	00 c0       	rjmp	.+0      	; 0x434 <LCD_init+0x10>
 434:	00 00       	nop

void LCD_init(){
	
	_delay_ms(100);
	
	DioDirectionSet(LCD_CTRL_DIR_REG, LCD_RS, DIO_OUTPUT);
 436:	41 e0       	ldi	r20, 0x01	; 1
 438:	61 e0       	ldi	r22, 0x01	; 1
 43a:	87 e3       	ldi	r24, 0x37	; 55
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
	DioDirectionSet(LCD_CTRL_DIR_REG, LCD_RW, DIO_OUTPUT);
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	62 e0       	ldi	r22, 0x02	; 2
 446:	87 e3       	ldi	r24, 0x37	; 55
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
	DioDirectionSet(LCD_CTRL_DIR_REG, LCD_EN, DIO_OUTPUT);
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	63 e0       	ldi	r22, 0x03	; 3
 452:	87 e3       	ldi	r24, 0x37	; 55
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
	LCD_SendInstruction(Display_Off);
 45a:	88 e0       	ldi	r24, 0x08	; 8
 45c:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_SendInstruction>
	
	#if LCD_8bit_Mode
	DioPortWrite(LCD_DATA_DIR_REG,0xFF);
	#else 
	*LCD_DATA_DIR_REG|=0xF0;
 460:	8a b3       	in	r24, 0x1a	; 26
 462:	80 6f       	ori	r24, 0xF0	; 240
 464:	8a bb       	out	0x1a, r24	; 26
	LCD_SendInstruction(Return_Home);
 466:	82 e0       	ldi	r24, 0x02	; 2
 468:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_SendInstruction>
	#endif
	
	LCD_SendInstruction(Function_Set);
 46c:	88 e2       	ldi	r24, 0x28	; 40
 46e:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_SendInstruction>
	LCD_SendInstruction(Display_On);
 472:	8c e0       	ldi	r24, 0x0C	; 12
 474:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_SendInstruction>
	LCD_Clear();
 478:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Clear>
 47c:	08 95       	ret

0000047e <Switch_Init>:
#define DEBOUNCE_PERIOD (20U)

Dio_PinStateEnum_t sw_PrevState = DIO_LOW;

void Switch_Init(Switch_t switch_Button){
	switch(switch_Button){
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	59 f0       	breq	.+22     	; 0x498 <Switch_Init+0x1a>
 482:	18 f0       	brcs	.+6      	; 0x48a <Switch_Init+0xc>
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	79 f0       	breq	.+30     	; 0x4a6 <Switch_Init+0x28>
 488:	08 95       	ret
		case SWITCH_0:
				DioDirectionSet(PORTB_DIR_REG,DIO_PIN0,DIO_INPUT);
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	60 e0       	ldi	r22, 0x00	; 0
 48e:	87 e3       	ldi	r24, 0x37	; 55
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
				break;
 496:	08 95       	ret
			case SWITCH_1:
				DioDirectionSet(PORTD_DIR_REG,DIO_PIN6,DIO_INPUT);
 498:	40 e0       	ldi	r20, 0x00	; 0
 49a:	66 e0       	ldi	r22, 0x06	; 6
 49c:	81 e3       	ldi	r24, 0x31	; 49
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
				break;
 4a4:	08 95       	ret
			case SWITCH_2:
				DioDirectionSet(PORTD_DIR_REG,DIO_PIN2,DIO_INPUT);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	81 e3       	ldi	r24, 0x31	; 49
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 8e 02 	call	0x51c	; 0x51c <DioDirectionSet>
 4b2:	08 95       	ret

000004b4 <__vector_6>:
#include "External_Interrupt.h"
#include "avr/interrupt.h"

Icu_ValueType gu16Value = 0U;
ISR(TIMER1_CAPT_vect)
{
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	8f 93       	push	r24
 4c0:	9f 93       	push	r25
	gu16Value = *(uint16 *)TIMER1_INP_CAP_LOW_REG;
 4c2:	86 b5       	in	r24, 0x26	; 38
 4c4:	97 b5       	in	r25, 0x27	; 39
 4c6:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 4ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
}
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <main>:

int main(void)
{
	LCD_init();
 4dc:	0e 94 12 02 	call	0x424	; 0x424 <LCD_init>
	Switch_Init(SWITCH_1);
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 3f 02 	call	0x47e	; 0x47e <Switch_Init>
	Icu_Init(&gastrIcu_Configuration);
 4e6:	80 e6       	ldi	r24, 0x60	; 96
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 44 03 	call	0x688	; 0x688 <Icu_Init>
	GlobaleInterrupts_StateSet(GLOBAL_INTERRUPTS_ENABLE);
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 2f 03 	call	0x65e	; 0x65e <GlobaleInterrupts_StateSet>
    while (1)
    {
		LCD_UnsignedIntegerDisplay(gu16Value);
 4f4:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
 4f8:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
 4fc:	80 e0       	ldi	r24, 0x00	; 0
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 09 01 	call	0x212	; 0x212 <LCD_UnsignedIntegerDisplay>
 504:	2f ef       	ldi	r18, 0xFF	; 255
 506:	89 e6       	ldi	r24, 0x69	; 105
 508:	98 e1       	ldi	r25, 0x18	; 24
 50a:	21 50       	subi	r18, 0x01	; 1
 50c:	80 40       	sbci	r24, 0x00	; 0
 50e:	90 40       	sbci	r25, 0x00	; 0
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0x2e>
 512:	00 c0       	rjmp	.+0      	; 0x514 <main+0x38>
 514:	00 00       	nop
		_delay_ms(500);
		LCD_Clear();
 516:	0e 94 0e 02 	call	0x41c	; 0x41c <LCD_Clear>
 51a:	ec cf       	rjmp	.-40     	; 0x4f4 <main+0x18>

0000051c <DioDirectionSet>:
#include "Dio.h"
#include "Macros.h"

void DioDirectionSet(volatile uint8 * port,Dio_PinEnum_t pin,Dio_PinDirEnum_t dir){
	switch(dir){
 51c:	44 23       	and	r20, r20
 51e:	19 f0       	breq	.+6      	; 0x526 <DioDirectionSet+0xa>
 520:	41 30       	cpi	r20, 0x01	; 1
 522:	71 f0       	breq	.+28     	; 0x540 <DioDirectionSet+0x24>
 524:	08 95       	ret
		case DIO_INPUT:
			CLEAR_BIT(*port,pin);
 526:	fc 01       	movw	r30, r24
 528:	40 81       	ld	r20, Z
 52a:	21 e0       	ldi	r18, 0x01	; 1
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DioDirectionSet+0x18>
 530:	22 0f       	add	r18, r18
 532:	33 1f       	adc	r19, r19
 534:	6a 95       	dec	r22
 536:	e2 f7       	brpl	.-8      	; 0x530 <DioDirectionSet+0x14>
 538:	20 95       	com	r18
 53a:	24 23       	and	r18, r20
 53c:	20 83       	st	Z, r18
			break;
 53e:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*port,pin);
 540:	fc 01       	movw	r30, r24
 542:	40 81       	ld	r20, Z
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DioDirectionSet+0x32>
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DioDirectionSet+0x2e>
 552:	24 2b       	or	r18, r20
 554:	20 83       	st	Z, r18
 556:	08 95       	ret

00000558 <DioChannelWrite>:
			break;
		default:
			break;
	}
}
void DioChannelWrite(volatile uint8 * port,Dio_PinEnum_t pin,Dio_PinStateEnum_t state){
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
	switch(pin){
 55c:	06 2f       	mov	r16, r22
 55e:	10 e0       	ldi	r17, 0x00	; 0
 560:	08 30       	cpi	r16, 0x08	; 8
 562:	11 05       	cpc	r17, r1
 564:	08 f0       	brcs	.+2      	; 0x568 <DioChannelWrite+0x10>
 566:	78 c0       	rjmp	.+240    	; 0x658 <DioChannelWrite+0x100>
 568:	f8 01       	movw	r30, r16
 56a:	e6 5d       	subi	r30, 0xD6	; 214
 56c:	ff 4f       	sbci	r31, 0xFF	; 255
 56e:	0c 94 81 03 	jmp	0x702	; 0x702 <__tablejump2__>
		case DIO_PIN0:
			switch(state){
 572:	44 23       	and	r20, r20
 574:	41 f0       	breq	.+16     	; 0x586 <DioChannelWrite+0x2e>
 576:	41 30       	cpi	r20, 0x01	; 1
 578:	09 f0       	breq	.+2      	; 0x57c <DioChannelWrite+0x24>
 57a:	6e c0       	rjmp	.+220    	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN0);
 57c:	fc 01       	movw	r30, r24
 57e:	20 81       	ld	r18, Z
 580:	21 60       	ori	r18, 0x01	; 1
 582:	20 83       	st	Z, r18
					break;
 584:	69 c0       	rjmp	.+210    	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN0);
 586:	fc 01       	movw	r30, r24
 588:	20 81       	ld	r18, Z
 58a:	2e 7f       	andi	r18, 0xFE	; 254
 58c:	20 83       	st	Z, r18
					break;
 58e:	64 c0       	rjmp	.+200    	; 0x658 <DioChannelWrite+0x100>
				}
			break;
		case DIO_PIN1:
			switch(state){
 590:	44 23       	and	r20, r20
 592:	41 f0       	breq	.+16     	; 0x5a4 <DioChannelWrite+0x4c>
 594:	41 30       	cpi	r20, 0x01	; 1
 596:	09 f0       	breq	.+2      	; 0x59a <DioChannelWrite+0x42>
 598:	5f c0       	rjmp	.+190    	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN1);
 59a:	fc 01       	movw	r30, r24
 59c:	20 81       	ld	r18, Z
 59e:	22 60       	ori	r18, 0x02	; 2
 5a0:	20 83       	st	Z, r18
					break;
 5a2:	5a c0       	rjmp	.+180    	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN1);
 5a4:	fc 01       	movw	r30, r24
 5a6:	20 81       	ld	r18, Z
 5a8:	2d 7f       	andi	r18, 0xFD	; 253
 5aa:	20 83       	st	Z, r18
					break;
 5ac:	55 c0       	rjmp	.+170    	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN2:
			switch(state){
 5ae:	44 23       	and	r20, r20
 5b0:	41 f0       	breq	.+16     	; 0x5c2 <DioChannelWrite+0x6a>
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	09 f0       	breq	.+2      	; 0x5b8 <DioChannelWrite+0x60>
 5b6:	50 c0       	rjmp	.+160    	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN2);
 5b8:	fc 01       	movw	r30, r24
 5ba:	20 81       	ld	r18, Z
 5bc:	24 60       	ori	r18, 0x04	; 4
 5be:	20 83       	st	Z, r18
					break;
 5c0:	4b c0       	rjmp	.+150    	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN2);
 5c2:	fc 01       	movw	r30, r24
 5c4:	20 81       	ld	r18, Z
 5c6:	2b 7f       	andi	r18, 0xFB	; 251
 5c8:	20 83       	st	Z, r18
					break;
 5ca:	46 c0       	rjmp	.+140    	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN3:
			switch(state){
 5cc:	44 23       	and	r20, r20
 5ce:	41 f0       	breq	.+16     	; 0x5e0 <DioChannelWrite+0x88>
 5d0:	41 30       	cpi	r20, 0x01	; 1
 5d2:	09 f0       	breq	.+2      	; 0x5d6 <DioChannelWrite+0x7e>
 5d4:	41 c0       	rjmp	.+130    	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN3);
 5d6:	fc 01       	movw	r30, r24
 5d8:	20 81       	ld	r18, Z
 5da:	28 60       	ori	r18, 0x08	; 8
 5dc:	20 83       	st	Z, r18
					break;
 5de:	3c c0       	rjmp	.+120    	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN3);
 5e0:	fc 01       	movw	r30, r24
 5e2:	20 81       	ld	r18, Z
 5e4:	27 7f       	andi	r18, 0xF7	; 247
 5e6:	20 83       	st	Z, r18
					break;
 5e8:	37 c0       	rjmp	.+110    	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN4:
			switch(state){
 5ea:	44 23       	and	r20, r20
 5ec:	39 f0       	breq	.+14     	; 0x5fc <DioChannelWrite+0xa4>
 5ee:	41 30       	cpi	r20, 0x01	; 1
 5f0:	99 f5       	brne	.+102    	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN4);
 5f2:	fc 01       	movw	r30, r24
 5f4:	20 81       	ld	r18, Z
 5f6:	20 61       	ori	r18, 0x10	; 16
 5f8:	20 83       	st	Z, r18
					break;
 5fa:	2e c0       	rjmp	.+92     	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN4);
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 81       	ld	r18, Z
 600:	2f 7e       	andi	r18, 0xEF	; 239
 602:	20 83       	st	Z, r18
					break;
 604:	29 c0       	rjmp	.+82     	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN5:
			switch(state){
 606:	44 23       	and	r20, r20
 608:	39 f0       	breq	.+14     	; 0x618 <DioChannelWrite+0xc0>
 60a:	41 30       	cpi	r20, 0x01	; 1
 60c:	29 f5       	brne	.+74     	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN5);
 60e:	fc 01       	movw	r30, r24
 610:	20 81       	ld	r18, Z
 612:	20 62       	ori	r18, 0x20	; 32
 614:	20 83       	st	Z, r18
					break;
 616:	20 c0       	rjmp	.+64     	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN5);
 618:	fc 01       	movw	r30, r24
 61a:	20 81       	ld	r18, Z
 61c:	2f 7d       	andi	r18, 0xDF	; 223
 61e:	20 83       	st	Z, r18
					break;
 620:	1b c0       	rjmp	.+54     	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN6:
			switch(state){
 622:	44 23       	and	r20, r20
 624:	39 f0       	breq	.+14     	; 0x634 <DioChannelWrite+0xdc>
 626:	41 30       	cpi	r20, 0x01	; 1
 628:	b9 f4       	brne	.+46     	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN6);
 62a:	fc 01       	movw	r30, r24
 62c:	20 81       	ld	r18, Z
 62e:	20 64       	ori	r18, 0x40	; 64
 630:	20 83       	st	Z, r18
					break;
 632:	12 c0       	rjmp	.+36     	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN6);
 634:	fc 01       	movw	r30, r24
 636:	20 81       	ld	r18, Z
 638:	2f 7b       	andi	r18, 0xBF	; 191
 63a:	20 83       	st	Z, r18
					break;
 63c:	0d c0       	rjmp	.+26     	; 0x658 <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN7:
			switch(state){
 63e:	44 23       	and	r20, r20
 640:	39 f0       	breq	.+14     	; 0x650 <DioChannelWrite+0xf8>
 642:	41 30       	cpi	r20, 0x01	; 1
 644:	49 f4       	brne	.+18     	; 0x658 <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN7);
 646:	fc 01       	movw	r30, r24
 648:	20 81       	ld	r18, Z
 64a:	20 68       	ori	r18, 0x80	; 128
 64c:	20 83       	st	Z, r18
					break;
 64e:	04 c0       	rjmp	.+8      	; 0x658 <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN7);
 650:	fc 01       	movw	r30, r24
 652:	20 81       	ld	r18, Z
 654:	2f 77       	andi	r18, 0x7F	; 127
 656:	20 83       	st	Z, r18
			break;
		default:
			break;
	}
	
}
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	08 95       	ret

0000065e <GlobaleInterrupts_StateSet>:
		break;
	}
}
void GlobaleInterrupts_StateSet(GlobalInterruptsStateEnum_t State)
{
	switch(State)
 65e:	88 23       	and	r24, r24
 660:	19 f0       	breq	.+6      	; 0x668 <GlobaleInterrupts_StateSet+0xa>
 662:	81 30       	cpi	r24, 0x01	; 1
 664:	29 f0       	breq	.+10     	; 0x670 <GlobaleInterrupts_StateSet+0x12>
 666:	08 95       	ret
	{
		case GLOBAL_INTERRUPTS_DISABLE:
		CLEAR_BIT(*AVR_STATUS_REG, GLOBALE_INTERRUPTS_ENABLE_BIT);
 668:	8f b7       	in	r24, 0x3f	; 63
 66a:	8f 77       	andi	r24, 0x7F	; 127
 66c:	8f bf       	out	0x3f, r24	; 63
		break;
 66e:	08 95       	ret
		case GLOBAL_INTERRUPTS_ENABLE:
		SET_BIT(*AVR_STATUS_REG, GLOBALE_INTERRUPTS_ENABLE_BIT);
 670:	8f b7       	in	r24, 0x3f	; 63
 672:	80 68       	ori	r24, 0x80	; 128
 674:	8f bf       	out	0x3f, r24	; 63
 676:	08 95       	ret

00000678 <Icu_Timer1InitReg>:
	return LocalIcuStatus;
}

static void Icu_Timer1InitReg(void)
{
	*TIMER1_CMP_B_HIGH_REG = 0x00U;
 678:	19 bc       	out	0x29, r1	; 41
	*TIMER1_CMP_B_LOW_REG = 0x00U;
 67a:	18 bc       	out	0x28, r1	; 40
	*TIMER1_CTRL_A_REG = 0x00U;
 67c:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_B_REG = 0x00U;
 67e:	1e bc       	out	0x2e, r1	; 46
	*TIMER_INTERRUPT_MASK_REG &= (0xC3U);
 680:	89 b7       	in	r24, 0x39	; 57
 682:	83 7c       	andi	r24, 0xC3	; 195
 684:	89 bf       	out	0x39, r24	; 57
 686:	08 95       	ret

00000688 <Icu_Init>:

/*******************************************************************************
 *                     Implementation of the functions                        *
 *******************************************************************************/
void Icu_Init(Icu_ConfigType * ConfigPtr)
{
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
	switch(ConfigPtr->IcuChannel)
 68c:	fc 01       	movw	r30, r24
 68e:	20 81       	ld	r18, Z
 690:	21 11       	cpse	r18, r1
 692:	12 c0       	rjmp	.+36     	; 0x6b8 <Icu_Init+0x30>
 694:	ec 01       	movw	r28, r24
	{
		case Icu_Channel1:
		Icu_Timer1InitReg();
 696:	0e 94 3c 03 	call	0x678	; 0x678 <Icu_Timer1InitReg>
		*TIMER1_CTRL_B_REG |= ConfigPtr->IcuEdgeTrigger;
 69a:	9e b5       	in	r25, 0x2e	; 46
 69c:	89 81       	ldd	r24, Y+1	; 0x01
 69e:	89 2b       	or	r24, r25
 6a0:	8e bd       	out	0x2e, r24	; 46
		*TIMER1_CTRL_B_REG |= ConfigPtr->IcuClkDiv;
 6a2:	9e b5       	in	r25, 0x2e	; 46
 6a4:	8a 81       	ldd	r24, Y+2	; 0x02
 6a6:	89 2b       	or	r24, r25
 6a8:	8e bd       	out	0x2e, r24	; 46
		SET_BIT(*TIMER1_CTRL_B_REG,INPUT_CAPTUR_NOISE_CANCLER);
 6aa:	8e b5       	in	r24, 0x2e	; 46
 6ac:	80 68       	ori	r24, 0x80	; 128
 6ae:	8e bd       	out	0x2e, r24	; 46
		*TIMER_INTERRUPT_MASK_REG |= ConfigPtr->IcuInt;
 6b0:	99 b7       	in	r25, 0x39	; 57
 6b2:	8b 81       	ldd	r24, Y+3	; 0x03
 6b4:	89 2b       	or	r24, r25
 6b6:	89 bf       	out	0x39, r24	; 57
		break;
		default:
		break;
	}
}
 6b8:	df 91       	pop	r29
 6ba:	cf 91       	pop	r28
 6bc:	08 95       	ret

000006be <__udivmodsi4>:
 6be:	a1 e2       	ldi	r26, 0x21	; 33
 6c0:	1a 2e       	mov	r1, r26
 6c2:	aa 1b       	sub	r26, r26
 6c4:	bb 1b       	sub	r27, r27
 6c6:	fd 01       	movw	r30, r26
 6c8:	0d c0       	rjmp	.+26     	; 0x6e4 <__udivmodsi4_ep>

000006ca <__udivmodsi4_loop>:
 6ca:	aa 1f       	adc	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	ee 1f       	adc	r30, r30
 6d0:	ff 1f       	adc	r31, r31
 6d2:	a2 17       	cp	r26, r18
 6d4:	b3 07       	cpc	r27, r19
 6d6:	e4 07       	cpc	r30, r20
 6d8:	f5 07       	cpc	r31, r21
 6da:	20 f0       	brcs	.+8      	; 0x6e4 <__udivmodsi4_ep>
 6dc:	a2 1b       	sub	r26, r18
 6de:	b3 0b       	sbc	r27, r19
 6e0:	e4 0b       	sbc	r30, r20
 6e2:	f5 0b       	sbc	r31, r21

000006e4 <__udivmodsi4_ep>:
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	99 1f       	adc	r25, r25
 6ec:	1a 94       	dec	r1
 6ee:	69 f7       	brne	.-38     	; 0x6ca <__udivmodsi4_loop>
 6f0:	60 95       	com	r22
 6f2:	70 95       	com	r23
 6f4:	80 95       	com	r24
 6f6:	90 95       	com	r25
 6f8:	9b 01       	movw	r18, r22
 6fa:	ac 01       	movw	r20, r24
 6fc:	bd 01       	movw	r22, r26
 6fe:	cf 01       	movw	r24, r30
 700:	08 95       	ret

00000702 <__tablejump2__>:
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	05 90       	lpm	r0, Z+
 708:	f4 91       	lpm	r31, Z
 70a:	e0 2d       	mov	r30, r0
 70c:	09 94       	ijmp

0000070e <_exit>:
 70e:	f8 94       	cli

00000710 <__stop_program>:
 710:	ff cf       	rjmp	.-2      	; 0x710 <__stop_program>
