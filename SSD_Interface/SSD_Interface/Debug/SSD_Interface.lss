
SSD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002a0  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d23  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000845  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000065b  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001fd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004d4  00000000  00000000  000020b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bd  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002945  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  54:	74 00       	.word	0x0074	; ????
  56:	83 00       	.word	0x0083	; ????
  58:	92 00       	.word	0x0092	; ????
  5a:	a1 00       	.word	0x00a1	; ????
  5c:	b0 00       	.word	0x00b0	; ????
  5e:	be 00       	.word	0x00be	; ????
  60:	cc 00       	.word	0x00cc	; ????
  62:	da 00       	.word	0x00da	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e0 ea       	ldi	r30, 0xA0	; 160
  78:	f2 e0       	ldi	r31, 0x02	; 2
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <main>
  8a:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DioDirectionSet>:
#include "Dio.h"
#include "Macros.h"

void DioDirectionSet(volatile uint8 * port,Dio_PinEnum_t pin,Dio_PinDirEnum_t dir){
	switch(dir){
  92:	44 23       	and	r20, r20
  94:	19 f0       	breq	.+6      	; 0x9c <DioDirectionSet+0xa>
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	71 f0       	breq	.+28     	; 0xb6 <DioDirectionSet+0x24>
  9a:	08 95       	ret
		case DIO_INPUT:
			CLEAR_BIT(*port,pin);
  9c:	fc 01       	movw	r30, r24
  9e:	40 81       	ld	r20, Z
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DioDirectionSet+0x18>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DioDirectionSet+0x14>
  ae:	20 95       	com	r18
  b0:	24 23       	and	r18, r20
  b2:	20 83       	st	Z, r18
			break;
  b4:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*port,pin);
  b6:	fc 01       	movw	r30, r24
  b8:	40 81       	ld	r20, Z
  ba:	21 e0       	ldi	r18, 0x01	; 1
  bc:	30 e0       	ldi	r19, 0x00	; 0
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DioDirectionSet+0x32>
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	6a 95       	dec	r22
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DioDirectionSet+0x2e>
  c8:	24 2b       	or	r18, r20
  ca:	20 83       	st	Z, r18
  cc:	08 95       	ret

000000ce <DioChannelWrite>:
			break;
		default:
			break;
	}
}
void DioChannelWrite(volatile uint8 * port,Dio_PinEnum_t pin,Dio_PinStateEnum_t state){
  ce:	0f 93       	push	r16
  d0:	1f 93       	push	r17
	switch(pin){
  d2:	06 2f       	mov	r16, r22
  d4:	10 e0       	ldi	r17, 0x00	; 0
  d6:	08 30       	cpi	r16, 0x08	; 8
  d8:	11 05       	cpc	r17, r1
  da:	08 f0       	brcs	.+2      	; 0xde <DioChannelWrite+0x10>
  dc:	78 c0       	rjmp	.+240    	; 0x1ce <DioChannelWrite+0x100>
  de:	f8 01       	movw	r30, r16
  e0:	e6 5d       	subi	r30, 0xD6	; 214
  e2:	ff 4f       	sbci	r31, 0xFF	; 255
  e4:	0c 94 48 01 	jmp	0x290	; 0x290 <__tablejump2__>
		case DIO_PIN0:
			switch(state){
  e8:	44 23       	and	r20, r20
  ea:	41 f0       	breq	.+16     	; 0xfc <DioChannelWrite+0x2e>
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	09 f0       	breq	.+2      	; 0xf2 <DioChannelWrite+0x24>
  f0:	6e c0       	rjmp	.+220    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN0);
  f2:	fc 01       	movw	r30, r24
  f4:	20 81       	ld	r18, Z
  f6:	21 60       	ori	r18, 0x01	; 1
  f8:	20 83       	st	Z, r18
					break;
  fa:	69 c0       	rjmp	.+210    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN0);
  fc:	fc 01       	movw	r30, r24
  fe:	20 81       	ld	r18, Z
 100:	2e 7f       	andi	r18, 0xFE	; 254
 102:	20 83       	st	Z, r18
					break;
 104:	64 c0       	rjmp	.+200    	; 0x1ce <DioChannelWrite+0x100>
				}
			break;
		case DIO_PIN1:
			switch(state){
 106:	44 23       	and	r20, r20
 108:	41 f0       	breq	.+16     	; 0x11a <DioChannelWrite+0x4c>
 10a:	41 30       	cpi	r20, 0x01	; 1
 10c:	09 f0       	breq	.+2      	; 0x110 <DioChannelWrite+0x42>
 10e:	5f c0       	rjmp	.+190    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN1);
 110:	fc 01       	movw	r30, r24
 112:	20 81       	ld	r18, Z
 114:	22 60       	ori	r18, 0x02	; 2
 116:	20 83       	st	Z, r18
					break;
 118:	5a c0       	rjmp	.+180    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN1);
 11a:	fc 01       	movw	r30, r24
 11c:	20 81       	ld	r18, Z
 11e:	2d 7f       	andi	r18, 0xFD	; 253
 120:	20 83       	st	Z, r18
					break;
 122:	55 c0       	rjmp	.+170    	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN2:
			switch(state){
 124:	44 23       	and	r20, r20
 126:	41 f0       	breq	.+16     	; 0x138 <DioChannelWrite+0x6a>
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	09 f0       	breq	.+2      	; 0x12e <DioChannelWrite+0x60>
 12c:	50 c0       	rjmp	.+160    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN2);
 12e:	fc 01       	movw	r30, r24
 130:	20 81       	ld	r18, Z
 132:	24 60       	ori	r18, 0x04	; 4
 134:	20 83       	st	Z, r18
					break;
 136:	4b c0       	rjmp	.+150    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN2);
 138:	fc 01       	movw	r30, r24
 13a:	20 81       	ld	r18, Z
 13c:	2b 7f       	andi	r18, 0xFB	; 251
 13e:	20 83       	st	Z, r18
					break;
 140:	46 c0       	rjmp	.+140    	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN3:
			switch(state){
 142:	44 23       	and	r20, r20
 144:	41 f0       	breq	.+16     	; 0x156 <DioChannelWrite+0x88>
 146:	41 30       	cpi	r20, 0x01	; 1
 148:	09 f0       	breq	.+2      	; 0x14c <DioChannelWrite+0x7e>
 14a:	41 c0       	rjmp	.+130    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN3);
 14c:	fc 01       	movw	r30, r24
 14e:	20 81       	ld	r18, Z
 150:	28 60       	ori	r18, 0x08	; 8
 152:	20 83       	st	Z, r18
					break;
 154:	3c c0       	rjmp	.+120    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN3);
 156:	fc 01       	movw	r30, r24
 158:	20 81       	ld	r18, Z
 15a:	27 7f       	andi	r18, 0xF7	; 247
 15c:	20 83       	st	Z, r18
					break;
 15e:	37 c0       	rjmp	.+110    	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN4:
			switch(state){
 160:	44 23       	and	r20, r20
 162:	39 f0       	breq	.+14     	; 0x172 <DioChannelWrite+0xa4>
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	99 f5       	brne	.+102    	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN4);
 168:	fc 01       	movw	r30, r24
 16a:	20 81       	ld	r18, Z
 16c:	20 61       	ori	r18, 0x10	; 16
 16e:	20 83       	st	Z, r18
					break;
 170:	2e c0       	rjmp	.+92     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN4);
 172:	fc 01       	movw	r30, r24
 174:	20 81       	ld	r18, Z
 176:	2f 7e       	andi	r18, 0xEF	; 239
 178:	20 83       	st	Z, r18
					break;
 17a:	29 c0       	rjmp	.+82     	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN5:
			switch(state){
 17c:	44 23       	and	r20, r20
 17e:	39 f0       	breq	.+14     	; 0x18e <DioChannelWrite+0xc0>
 180:	41 30       	cpi	r20, 0x01	; 1
 182:	29 f5       	brne	.+74     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN5);
 184:	fc 01       	movw	r30, r24
 186:	20 81       	ld	r18, Z
 188:	20 62       	ori	r18, 0x20	; 32
 18a:	20 83       	st	Z, r18
					break;
 18c:	20 c0       	rjmp	.+64     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN5);
 18e:	fc 01       	movw	r30, r24
 190:	20 81       	ld	r18, Z
 192:	2f 7d       	andi	r18, 0xDF	; 223
 194:	20 83       	st	Z, r18
					break;
 196:	1b c0       	rjmp	.+54     	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN6:
			switch(state){
 198:	44 23       	and	r20, r20
 19a:	39 f0       	breq	.+14     	; 0x1aa <DioChannelWrite+0xdc>
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	b9 f4       	brne	.+46     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN6);
 1a0:	fc 01       	movw	r30, r24
 1a2:	20 81       	ld	r18, Z
 1a4:	20 64       	ori	r18, 0x40	; 64
 1a6:	20 83       	st	Z, r18
					break;
 1a8:	12 c0       	rjmp	.+36     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN6);
 1aa:	fc 01       	movw	r30, r24
 1ac:	20 81       	ld	r18, Z
 1ae:	2f 7b       	andi	r18, 0xBF	; 191
 1b0:	20 83       	st	Z, r18
					break;
 1b2:	0d c0       	rjmp	.+26     	; 0x1ce <DioChannelWrite+0x100>
			}
			break;
		case DIO_PIN7:
			switch(state){
 1b4:	44 23       	and	r20, r20
 1b6:	39 f0       	breq	.+14     	; 0x1c6 <DioChannelWrite+0xf8>
 1b8:	41 30       	cpi	r20, 0x01	; 1
 1ba:	49 f4       	brne	.+18     	; 0x1ce <DioChannelWrite+0x100>
				case DIO_HIGH:
					SET_BIT(*port,DIO_PIN7);
 1bc:	fc 01       	movw	r30, r24
 1be:	20 81       	ld	r18, Z
 1c0:	20 68       	ori	r18, 0x80	; 128
 1c2:	20 83       	st	Z, r18
					break;
 1c4:	04 c0       	rjmp	.+8      	; 0x1ce <DioChannelWrite+0x100>
				case DIO_LOW:
					CLEAR_BIT(*port,DIO_PIN7);
 1c6:	fc 01       	movw	r30, r24
 1c8:	20 81       	ld	r18, Z
 1ca:	2f 77       	andi	r18, 0x7F	; 127
 1cc:	20 83       	st	Z, r18
			break;
		default:
			break;
	}
	
}
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	08 95       	ret

000001d4 <main>:
#include "util/delay.h"


int main(void)
{
	Ssd_init();
 1d4:	0e 94 04 01 	call	0x208	; 0x208 <Ssd_init>
    while (1) 
    {
		for(int i = 0; i<10; i++)
 1d8:	c0 e0       	ldi	r28, 0x00	; 0
 1da:	d0 e0       	ldi	r29, 0x00	; 0
 1dc:	11 c0       	rjmp	.+34     	; 0x200 <main+0x2c>
		{
			Ssd_StateSet(SSD1_EN,numSet[i]);
 1de:	fe 01       	movw	r30, r28
 1e0:	e0 5a       	subi	r30, 0xA0	; 160
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	60 81       	ld	r22, Z
 1e6:	82 e0       	ldi	r24, 0x02	; 2
 1e8:	0e 94 14 01 	call	0x228	; 0x228 <Ssd_StateSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x1e>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x28>
 1fc:	00 00       	nop
int main(void)
{
	Ssd_init();
    while (1) 
    {
		for(int i = 0; i<10; i++)
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	ca 30       	cpi	r28, 0x0A	; 10
 202:	d1 05       	cpc	r29, r1
 204:	64 f3       	brlt	.-40     	; 0x1de <main+0xa>
 206:	e8 cf       	rjmp	.-48     	; 0x1d8 <main+0x4>

00000208 <Ssd_init>:

const uint8 numSet[10] = {ZERO,ONE,TOW,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	
void Ssd_init(){

	DioDirectionSet(SSD_ControlDir_Reg,SSD1_EN,DIO_OUTPUT);
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	62 e0       	ldi	r22, 0x02	; 2
 20c:	87 e3       	ldi	r24, 0x37	; 55
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	0e 94 49 00 	call	0x92	; 0x92 <DioDirectionSet>
	DioDirectionSet(SSD_ControlDir_Reg,SSD2_EN,DIO_OUTPUT);
 214:	41 e0       	ldi	r20, 0x01	; 1
 216:	61 e0       	ldi	r22, 0x01	; 1
 218:	87 e3       	ldi	r24, 0x37	; 55
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 49 00 	call	0x92	; 0x92 <DioDirectionSet>
	
	*SSD_DataDir_Reg |= 0xf0;
 220:	8a b3       	in	r24, 0x1a	; 26
 222:	80 6f       	ori	r24, 0xF0	; 240
 224:	8a bb       	out	0x1a, r24	; 26
 226:	08 95       	ret

00000228 <Ssd_StateSet>:
}

void Ssd_StateSet(SSD_Enable_t enable,num_t num){
 228:	cf 93       	push	r28
 22a:	c6 2f       	mov	r28, r22
	switch(enable){
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	79 f0       	breq	.+30     	; 0x24e <Ssd_StateSet+0x26>
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	d1 f4       	brne	.+52     	; 0x268 <Ssd_StateSet+0x40>
		case SSD1_EN :
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_HIGH);
 234:	41 e0       	ldi	r20, 0x01	; 1
 236:	62 e0       	ldi	r22, 0x02	; 2
 238:	88 e3       	ldi	r24, 0x38	; 56
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_LOW);
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	88 e3       	ldi	r24, 0x38	; 56
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			break;
 24c:	19 c0       	rjmp	.+50     	; 0x280 <Ssd_StateSet+0x58>
		case SSD2_EN :
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_LOW);
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	88 e3       	ldi	r24, 0x38	; 56
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_HIGH);
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	88 e3       	ldi	r24, 0x38	; 56
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			break;
 266:	0c c0       	rjmp	.+24     	; 0x280 <Ssd_StateSet+0x58>
		default:
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_LOW);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	62 e0       	ldi	r22, 0x02	; 2
 26c:	88 e3       	ldi	r24, 0x38	; 56
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 67 00 	call	0xce	; 0xce <DioChannelWrite>
			break;
	}
	*SSD_DataValue_Reg &= 0x0f;
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	8f 70       	andi	r24, 0x0F	; 15
 284:	8b bb       	out	0x1b, r24	; 27
	*SSD_DataValue_Reg |= num;
 286:	8b b3       	in	r24, 0x1b	; 27
 288:	c8 2b       	or	r28, r24
 28a:	cb bb       	out	0x1b, r28	; 27
}
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <__tablejump2__>:
 290:	ee 0f       	add	r30, r30
 292:	ff 1f       	adc	r31, r31
 294:	05 90       	lpm	r0, Z+
 296:	f4 91       	lpm	r31, Z
 298:	e0 2d       	mov	r30, r0
 29a:	09 94       	ijmp

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
