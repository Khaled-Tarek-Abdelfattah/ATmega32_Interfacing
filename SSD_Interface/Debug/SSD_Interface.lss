
SSD_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002be  00000332  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d79  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000845  00000000  00000000  000011a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000739  00000000  00000000  000019ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002128  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000512  00000000  00000000  0000221c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b4  00000000  00000000  0000272e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002be2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  54:	9c 00       	.word	0x009c	; ????
  56:	a9 00       	.word	0x00a9	; ????
  58:	b6 00       	.word	0x00b6	; ????
  5a:	c3 00       	.word	0x00c3	; ????
  5c:	cf 00       	.word	0x00cf	; ????
  5e:	db 00       	.word	0x00db	; ????
  60:	e7 00       	.word	0x00e7	; ????
  62:	f3 00       	.word	0x00f3	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	ee eb       	ldi	r30, 0xBE	; 190
  78:	f2 e0       	ldi	r31, 0x02	; 2
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>
  86:	0e 94 01 01 	call	0x202	; 0x202 <main>
  8a:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DioDirectionSet>:
#include "ATMEGA32A_Config.h"
#include "Macros.h"

void DioDirectionSet(Dio_PortEnum_t port,Dio_PinEnum_t pin,Dio_PinDirEnum_t dir){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	41 f0       	breq	.+16     	; 0xa6 <DioDirectionSet+0x14>
  96:	80 f0       	brcs	.+32     	; 0xb8 <DioDirectionSet+0x26>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	41 f0       	breq	.+16     	; 0xac <DioDirectionSet+0x1a>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	49 f0       	breq	.+18     	; 0xb2 <DioDirectionSet+0x20>
#include "Dio.h"
#include "ATMEGA32A_Config.h"
#include "Macros.h"

void DioDirectionSet(Dio_PortEnum_t port,Dio_PinEnum_t pin,Dio_PinDirEnum_t dir){
	volatile uint8 *pu8Reg=NULL_PTR;
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	0b c0       	rjmp	.+22     	; 0xbc <DioDirectionSet+0x2a>
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_DIR_REG;
			break;
		case DIO_PORTB:
			pu8Reg=PORTB_DIR_REG;
  a6:	e7 e3       	ldi	r30, 0x37	; 55
  a8:	f0 e0       	ldi	r31, 0x00	; 0
			break;
  aa:	08 c0       	rjmp	.+16     	; 0xbc <DioDirectionSet+0x2a>
		case DIO_PORTC:
			pu8Reg=PORTC_DIR_REG;
  ac:	e4 e3       	ldi	r30, 0x34	; 52
  ae:	f0 e0       	ldi	r31, 0x00	; 0
			break;
  b0:	05 c0       	rjmp	.+10     	; 0xbc <DioDirectionSet+0x2a>
		case DIO_PORTD:
			pu8Reg=PORTD_DIR_REG;
  b2:	e1 e3       	ldi	r30, 0x31	; 49
  b4:	f0 e0       	ldi	r31, 0x00	; 0
			break;
  b6:	02 c0       	rjmp	.+4      	; 0xbc <DioDirectionSet+0x2a>

void DioDirectionSet(Dio_PortEnum_t port,Dio_PinEnum_t pin,Dio_PinDirEnum_t dir){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_DIR_REG;
  b8:	ea e3       	ldi	r30, 0x3A	; 58
  ba:	f0 e0       	ldi	r31, 0x00	; 0
			pu8Reg=PORTD_DIR_REG;
			break;
		default:
			break;
	}
	switch(dir){
  bc:	44 23       	and	r20, r20
  be:	19 f0       	breq	.+6      	; 0xc6 <DioDirectionSet+0x34>
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	69 f0       	breq	.+26     	; 0xde <DioDirectionSet+0x4c>
  c4:	08 95       	ret
		case DIO_INPUT:
			CLEAR_BIT(*pu8Reg,pin);
  c6:	20 81       	ld	r18, Z
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DioDirectionSet+0x40>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DioDirectionSet+0x3c>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	80 83       	st	Z, r24
			break;
  dc:	08 95       	ret
		case DIO_OUTPUT:
			SET_BIT(*pu8Reg,pin);
  de:	20 81       	ld	r18, Z
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DioDirectionSet+0x58>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DioDirectionSet+0x54>
  ee:	82 2b       	or	r24, r18
  f0:	80 83       	st	Z, r24
  f2:	08 95       	ret

000000f4 <DioChannelWrite>:
			break;
		default:
			break;
	}
}
void DioChannelWrite(Dio_PinEnum_t port,Dio_PinEnum_t pin,Dio_PinStateEnum_t state){
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	41 f0       	breq	.+16     	; 0x10c <DioChannelWrite+0x18>
  fc:	80 f0       	brcs	.+32     	; 0x11e <DioChannelWrite+0x2a>
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	41 f0       	breq	.+16     	; 0x112 <DioChannelWrite+0x1e>
 102:	83 30       	cpi	r24, 0x03	; 3
 104:	49 f0       	breq	.+18     	; 0x118 <DioChannelWrite+0x24>
		default:
			break;
	}
}
void DioChannelWrite(Dio_PinEnum_t port,Dio_PinEnum_t pin,Dio_PinStateEnum_t state){
	volatile uint8 *pu8Reg=NULL_PTR;
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	0b c0       	rjmp	.+22     	; 0x122 <DioChannelWrite+0x2e>
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_OUTPUT_REG;
			break;
		case DIO_PORTB:
			pu8Reg=PORTB_OUTPUT_REG;
 10c:	c8 e3       	ldi	r28, 0x38	; 56
 10e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 110:	08 c0       	rjmp	.+16     	; 0x122 <DioChannelWrite+0x2e>
		case DIO_PORTC:
			pu8Reg=PORTC_OUTPUT_REG;
 112:	c5 e3       	ldi	r28, 0x35	; 53
 114:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 116:	05 c0       	rjmp	.+10     	; 0x122 <DioChannelWrite+0x2e>
		case DIO_PORTD:
			pu8Reg=PORTD_OUTPUT_REG;
 118:	c2 e3       	ldi	r28, 0x32	; 50
 11a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 11c:	02 c0       	rjmp	.+4      	; 0x122 <DioChannelWrite+0x2e>
}
void DioChannelWrite(Dio_PinEnum_t port,Dio_PinEnum_t pin,Dio_PinStateEnum_t state){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_OUTPUT_REG;
 11e:	cb e3       	ldi	r28, 0x3B	; 59
 120:	d0 e0       	ldi	r29, 0x00	; 0
			pu8Reg=PORTD_OUTPUT_REG;
			break;
		default:
			break;
	}
	switch(pin){
 122:	86 2f       	mov	r24, r22
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	91 05       	cpc	r25, r1
 12a:	08 f0       	brcs	.+2      	; 0x12e <DioChannelWrite+0x3a>
 12c:	67 c0       	rjmp	.+206    	; 0x1fc <DioChannelWrite+0x108>
 12e:	fc 01       	movw	r30, r24
 130:	e6 5d       	subi	r30, 0xD6	; 214
 132:	ff 4f       	sbci	r31, 0xFF	; 255
 134:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__tablejump2__>
		case DIO_PIN0:
			switch(state){
 138:	44 23       	and	r20, r20
 13a:	39 f0       	breq	.+14     	; 0x14a <DioChannelWrite+0x56>
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	09 f0       	breq	.+2      	; 0x142 <DioChannelWrite+0x4e>
 140:	5d c0       	rjmp	.+186    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN0);
 142:	88 81       	ld	r24, Y
 144:	81 60       	ori	r24, 0x01	; 1
 146:	88 83       	st	Y, r24
					break;
 148:	59 c0       	rjmp	.+178    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN0);
 14a:	88 81       	ld	r24, Y
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	88 83       	st	Y, r24
					break;
 150:	55 c0       	rjmp	.+170    	; 0x1fc <DioChannelWrite+0x108>
				}
			break;
		case DIO_PIN1:
			switch(state){
 152:	44 23       	and	r20, r20
 154:	39 f0       	breq	.+14     	; 0x164 <DioChannelWrite+0x70>
 156:	41 30       	cpi	r20, 0x01	; 1
 158:	09 f0       	breq	.+2      	; 0x15c <DioChannelWrite+0x68>
 15a:	50 c0       	rjmp	.+160    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN1);
 15c:	88 81       	ld	r24, Y
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	88 83       	st	Y, r24
					break;
 162:	4c c0       	rjmp	.+152    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN1);
 164:	88 81       	ld	r24, Y
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	88 83       	st	Y, r24
					break;
 16a:	48 c0       	rjmp	.+144    	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN2:
			switch(state){
 16c:	44 23       	and	r20, r20
 16e:	39 f0       	breq	.+14     	; 0x17e <DioChannelWrite+0x8a>
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	09 f0       	breq	.+2      	; 0x176 <DioChannelWrite+0x82>
 174:	43 c0       	rjmp	.+134    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN2);
 176:	88 81       	ld	r24, Y
 178:	84 60       	ori	r24, 0x04	; 4
 17a:	88 83       	st	Y, r24
					break;
 17c:	3f c0       	rjmp	.+126    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN2);
 17e:	88 81       	ld	r24, Y
 180:	8b 7f       	andi	r24, 0xFB	; 251
 182:	88 83       	st	Y, r24
					break;
 184:	3b c0       	rjmp	.+118    	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN3:
			switch(state){
 186:	44 23       	and	r20, r20
 188:	31 f0       	breq	.+12     	; 0x196 <DioChannelWrite+0xa2>
 18a:	41 30       	cpi	r20, 0x01	; 1
 18c:	b9 f5       	brne	.+110    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN3);
 18e:	88 81       	ld	r24, Y
 190:	88 60       	ori	r24, 0x08	; 8
 192:	88 83       	st	Y, r24
					break;
 194:	33 c0       	rjmp	.+102    	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN3);
 196:	88 81       	ld	r24, Y
 198:	87 7f       	andi	r24, 0xF7	; 247
 19a:	88 83       	st	Y, r24
					break;
 19c:	2f c0       	rjmp	.+94     	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN4:
			switch(state){
 19e:	44 23       	and	r20, r20
 1a0:	31 f0       	breq	.+12     	; 0x1ae <DioChannelWrite+0xba>
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f5       	brne	.+86     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN4);
 1a6:	88 81       	ld	r24, Y
 1a8:	80 61       	ori	r24, 0x10	; 16
 1aa:	88 83       	st	Y, r24
					break;
 1ac:	27 c0       	rjmp	.+78     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN4);
 1ae:	88 81       	ld	r24, Y
 1b0:	8f 7e       	andi	r24, 0xEF	; 239
 1b2:	88 83       	st	Y, r24
					break;
 1b4:	23 c0       	rjmp	.+70     	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN5:
			switch(state){
 1b6:	44 23       	and	r20, r20
 1b8:	31 f0       	breq	.+12     	; 0x1c6 <DioChannelWrite+0xd2>
 1ba:	41 30       	cpi	r20, 0x01	; 1
 1bc:	f9 f4       	brne	.+62     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN5);
 1be:	88 81       	ld	r24, Y
 1c0:	80 62       	ori	r24, 0x20	; 32
 1c2:	88 83       	st	Y, r24
					break;
 1c4:	1b c0       	rjmp	.+54     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN5);
 1c6:	88 81       	ld	r24, Y
 1c8:	8f 7d       	andi	r24, 0xDF	; 223
 1ca:	88 83       	st	Y, r24
					break;
 1cc:	17 c0       	rjmp	.+46     	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN6:
			switch(state){
 1ce:	44 23       	and	r20, r20
 1d0:	31 f0       	breq	.+12     	; 0x1de <DioChannelWrite+0xea>
 1d2:	41 30       	cpi	r20, 0x01	; 1
 1d4:	99 f4       	brne	.+38     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN6);
 1d6:	88 81       	ld	r24, Y
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	88 83       	st	Y, r24
					break;
 1dc:	0f c0       	rjmp	.+30     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN6);
 1de:	88 81       	ld	r24, Y
 1e0:	8f 7b       	andi	r24, 0xBF	; 191
 1e2:	88 83       	st	Y, r24
					break;
 1e4:	0b c0       	rjmp	.+22     	; 0x1fc <DioChannelWrite+0x108>
			}
			break;
		case DIO_PIN7:
			switch(state){
 1e6:	44 23       	and	r20, r20
 1e8:	31 f0       	breq	.+12     	; 0x1f6 <DioChannelWrite+0x102>
 1ea:	41 30       	cpi	r20, 0x01	; 1
 1ec:	39 f4       	brne	.+14     	; 0x1fc <DioChannelWrite+0x108>
				case DIO_HIGH:
					SET_BIT(*pu8Reg,DIO_PIN7);
 1ee:	88 81       	ld	r24, Y
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	88 83       	st	Y, r24
					break;
 1f4:	03 c0       	rjmp	.+6      	; 0x1fc <DioChannelWrite+0x108>
				case DIO_LOW:
					CLEAR_BIT(*pu8Reg,DIO_PIN7);
 1f6:	88 81       	ld	r24, Y
 1f8:	8f 77       	andi	r24, 0x7F	; 127
 1fa:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
	
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <main>:
#include "util/delay.h"


int main(void)
{
	Ssd_init();
 202:	0e 94 1b 01 	call	0x236	; 0x236 <Ssd_init>
    while (1) 
    {
		for(int i = 0; i<10; i++)
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	11 c0       	rjmp	.+34     	; 0x22e <main+0x2c>
		{
			Ssd_StateSet(SSD1_EN,numSet[i]);
 20c:	fe 01       	movw	r30, r28
 20e:	e0 5a       	subi	r30, 0xA0	; 160
 210:	ff 4f       	sbci	r31, 0xFF	; 255
 212:	60 81       	ld	r22, Z
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 29 01 	call	0x252	; 0x252 <Ssd_StateSet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	83 ed       	ldi	r24, 0xD3	; 211
 21e:	90 e3       	ldi	r25, 0x30	; 48
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x1e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x28>
 22a:	00 00       	nop
int main(void)
{
	Ssd_init();
    while (1) 
    {
		for(int i = 0; i<10; i++)
 22c:	21 96       	adiw	r28, 0x01	; 1
 22e:	ca 30       	cpi	r28, 0x0A	; 10
 230:	d1 05       	cpc	r29, r1
 232:	64 f3       	brlt	.-40     	; 0x20c <main+0xa>
 234:	e8 cf       	rjmp	.-48     	; 0x206 <main+0x4>

00000236 <Ssd_init>:

const uint8 numSet[10] = {ZERO,ONE,TOW,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	
void Ssd_init(){

	DioDirectionSet(SSD_ControlDir_Reg,SSD1_EN,DIO_OUTPUT);
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	62 e0       	ldi	r22, 0x02	; 2
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	0e 94 49 00 	call	0x92	; 0x92 <DioDirectionSet>
	DioDirectionSet(SSD_ControlDir_Reg,SSD2_EN,DIO_OUTPUT);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 49 00 	call	0x92	; 0x92 <DioDirectionSet>
	
	*SSD_DataDir_Reg |= 0xf0;
 24a:	8a b3       	in	r24, 0x1a	; 26
 24c:	80 6f       	ori	r24, 0xF0	; 240
 24e:	8a bb       	out	0x1a, r24	; 26
 250:	08 95       	ret

00000252 <Ssd_StateSet>:
}

void Ssd_StateSet(SSD_Enable_t enable,num_t num){
 252:	cf 93       	push	r28
 254:	c6 2f       	mov	r28, r22
	switch(enable){
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	69 f0       	breq	.+26     	; 0x274 <Ssd_StateSet+0x22>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	b1 f4       	brne	.+44     	; 0x28a <Ssd_StateSet+0x38>
		case SSD1_EN :
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_HIGH);
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_LOW);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			break;
 272:	15 c0       	rjmp	.+42     	; 0x29e <Ssd_StateSet+0x4c>
		case SSD2_EN :
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_LOW);
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	62 e0       	ldi	r22, 0x02	; 2
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_HIGH);
 27e:	41 e0       	ldi	r20, 0x01	; 1
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			break;
 288:	0a c0       	rjmp	.+20     	; 0x29e <Ssd_StateSet+0x4c>
		default:
			DioChannelWrite(SSD_ControlEnable_Reg,SSD1_EN,DIO_LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			DioChannelWrite(SSD_ControlEnable_Reg,SSD2_EN,DIO_LOW);
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 7a 00 	call	0xf4	; 0xf4 <DioChannelWrite>
			break;
	}
	*SSD_DataValue_Reg &= 0x0f;
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	8f 70       	andi	r24, 0x0F	; 15
 2a2:	8b bb       	out	0x1b, r24	; 27
	*SSD_DataValue_Reg |= num;
 2a4:	8b b3       	in	r24, 0x1b	; 27
 2a6:	c8 2b       	or	r28, r24
 2a8:	cb bb       	out	0x1b, r28	; 27
}
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <__tablejump2__>:
 2ae:	ee 0f       	add	r30, r30
 2b0:	ff 1f       	adc	r31, r31
 2b2:	05 90       	lpm	r0, Z+
 2b4:	f4 91       	lpm	r31, Z
 2b6:	e0 2d       	mov	r30, r0
 2b8:	09 94       	ijmp

000002ba <_exit>:
 2ba:	f8 94       	cli

000002bc <__stop_program>:
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <__stop_program>
