
DIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f3a  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000806  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ae  00000000  00000000  00001c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000057a  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005ff  00000000  00000000  00002a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000308d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	98 00       	.word	0x0098	; ????
  56:	9d 00       	.word	0x009d	; ????
  58:	a2 00       	.word	0x00a2	; ????
  5a:	a7 00       	.word	0x00a7	; ????
  5c:	ac 00       	.word	0x00ac	; ????
  5e:	b1 00       	.word	0x00b1	; ????
  60:	b6 00       	.word	0x00b6	; ????
  62:	bb 00       	.word	0x00bb	; ????
  64:	e3 00       	.word	0x00e3	; ????
  66:	e6 00       	.word	0x00e6	; ????
  68:	ec 00       	.word	0x00ec	; ????
  6a:	f4 00       	.word	0x00f4	; ????
  6c:	fe 00       	.word	0x00fe	; ????
  6e:	08 01       	movw	r0, r16
  70:	14 01       	movw	r2, r8
  72:	21 01       	movw	r4, r2

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  84:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <DioDirectionSet>:
			break;
		default:
			break;
	}
	
}
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	41 f0       	breq	.+16     	; 0xa0 <DioDirectionSet+0x14>
  90:	80 f0       	brcs	.+32     	; 0xb2 <DioDirectionSet+0x26>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	41 f0       	breq	.+16     	; 0xa6 <DioDirectionSet+0x1a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	49 f0       	breq	.+18     	; 0xac <DioDirectionSet+0x20>
  9a:	e0 e0       	ldi	r30, 0x00	; 0
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	0b c0       	rjmp	.+22     	; 0xb6 <DioDirectionSet+0x2a>
  a0:	e7 e3       	ldi	r30, 0x37	; 55
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	08 c0       	rjmp	.+16     	; 0xb6 <DioDirectionSet+0x2a>
  a6:	e4 e3       	ldi	r30, 0x34	; 52
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <DioDirectionSet+0x2a>
  ac:	e1 e3       	ldi	r30, 0x31	; 49
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DioDirectionSet+0x2a>
  b2:	ea e3       	ldi	r30, 0x3A	; 58
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	44 23       	and	r20, r20
  b8:	19 f0       	breq	.+6      	; 0xc0 <DioDirectionSet+0x34>
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	69 f0       	breq	.+26     	; 0xd8 <DioDirectionSet+0x4c>
  be:	08 95       	ret
  c0:	20 81       	ld	r18, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DioDirectionSet+0x40>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DioDirectionSet+0x3c>
  d0:	80 95       	com	r24
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	08 95       	ret
  d8:	20 81       	ld	r18, Z
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DioDirectionSet+0x58>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DioDirectionSet+0x54>
  e8:	82 2b       	or	r24, r18
  ea:	80 83       	st	Z, r24
  ec:	08 95       	ret

000000ee <DioChannelToggle>:
void DioChannelToggle(Dio_PortEnum_t port,Dio_PinEnum_t pin){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	41 f0       	breq	.+16     	; 0x106 <DioChannelToggle+0x18>
  f6:	80 f0       	brcs	.+32     	; 0x118 <DioChannelToggle+0x2a>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	41 f0       	breq	.+16     	; 0x10c <DioChannelToggle+0x1e>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	49 f0       	breq	.+18     	; 0x112 <DioChannelToggle+0x24>
			break;
	}
	
}
void DioChannelToggle(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
 100:	c0 e0       	ldi	r28, 0x00	; 0
 102:	d0 e0       	ldi	r29, 0x00	; 0
 104:	0b c0       	rjmp	.+22     	; 0x11c <DioChannelToggle+0x2e>
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_OUTPUT_REG;
			break;
		case DIO_PORTB:
			pu8Reg=PORTB_OUTPUT_REG;
 106:	c8 e3       	ldi	r28, 0x38	; 56
 108:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 10a:	08 c0       	rjmp	.+16     	; 0x11c <DioChannelToggle+0x2e>
		case DIO_PORTC:
			pu8Reg=PORTC_OUTPUT_REG;
 10c:	c5 e3       	ldi	r28, 0x35	; 53
 10e:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 110:	05 c0       	rjmp	.+10     	; 0x11c <DioChannelToggle+0x2e>
		case DIO_PORTD:
			pu8Reg=PORTD_OUTPUT_REG;
 112:	c2 e3       	ldi	r28, 0x32	; 50
 114:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 116:	02 c0       	rjmp	.+4      	; 0x11c <DioChannelToggle+0x2e>
}
void DioChannelToggle(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_OUTPUT_REG;
 118:	cb e3       	ldi	r28, 0x3B	; 59
 11a:	d0 e0       	ldi	r29, 0x00	; 0
			pu8Reg=PORTD_OUTPUT_REG;
			break;
		default:
			break;
	}
	switch(pin){
 11c:	86 2f       	mov	r24, r22
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	88 30       	cpi	r24, 0x08	; 8
 122:	91 05       	cpc	r25, r1
 124:	58 f5       	brcc	.+86     	; 0x17c <DioChannelToggle+0x8e>
 126:	fc 01       	movw	r30, r24
 128:	e6 5d       	subi	r30, 0xD6	; 214
 12a:	ff 4f       	sbci	r31, 0xFF	; 255
 12c:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__tablejump2__>
		case DIO_PIN0:
			TOGGLE_BIT(*pu8Reg,DIO_PIN0);
 130:	98 81       	ld	r25, Y
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	89 27       	eor	r24, r25
 136:	88 83       	st	Y, r24
			break;
 138:	21 c0       	rjmp	.+66     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN1:
			TOGGLE_BIT(*pu8Reg,DIO_PIN1);
 13a:	98 81       	ld	r25, Y
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	89 27       	eor	r24, r25
 140:	88 83       	st	Y, r24
			break;
 142:	1c c0       	rjmp	.+56     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN2:
			TOGGLE_BIT(*pu8Reg,DIO_PIN2);
 144:	98 81       	ld	r25, Y
 146:	84 e0       	ldi	r24, 0x04	; 4
 148:	89 27       	eor	r24, r25
 14a:	88 83       	st	Y, r24
			break;
 14c:	17 c0       	rjmp	.+46     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN3:
			TOGGLE_BIT(*pu8Reg,DIO_PIN3);
 14e:	98 81       	ld	r25, Y
 150:	88 e0       	ldi	r24, 0x08	; 8
 152:	89 27       	eor	r24, r25
 154:	88 83       	st	Y, r24
			break;
 156:	12 c0       	rjmp	.+36     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN4:
			TOGGLE_BIT(*pu8Reg,DIO_PIN4);
 158:	98 81       	ld	r25, Y
 15a:	80 e1       	ldi	r24, 0x10	; 16
 15c:	89 27       	eor	r24, r25
 15e:	88 83       	st	Y, r24
			break;
 160:	0d c0       	rjmp	.+26     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN5:
			TOGGLE_BIT(*pu8Reg,DIO_PIN5);
 162:	98 81       	ld	r25, Y
 164:	80 e2       	ldi	r24, 0x20	; 32
 166:	89 27       	eor	r24, r25
 168:	88 83       	st	Y, r24
			break;
 16a:	08 c0       	rjmp	.+16     	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN6:
			TOGGLE_BIT(*pu8Reg,DIO_PIN6);
 16c:	98 81       	ld	r25, Y
 16e:	80 e4       	ldi	r24, 0x40	; 64
 170:	89 27       	eor	r24, r25
 172:	88 83       	st	Y, r24
			break;
 174:	03 c0       	rjmp	.+6      	; 0x17c <DioChannelToggle+0x8e>
		case DIO_PIN7:
			TOGGLE_BIT(*pu8Reg,DIO_PIN7);
 176:	88 81       	ld	r24, Y
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	88 83       	st	Y, r24
			break;
		default:
			break;
	}
	
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <DioChannelRead>:
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	41 f0       	breq	.+16     	; 0x19a <DioChannelRead+0x18>
 18a:	80 f0       	brcs	.+32     	; 0x1ac <DioChannelRead+0x2a>
 18c:	82 30       	cpi	r24, 0x02	; 2
 18e:	41 f0       	breq	.+16     	; 0x1a0 <DioChannelRead+0x1e>
 190:	83 30       	cpi	r24, 0x03	; 3
 192:	49 f0       	breq	.+18     	; 0x1a6 <DioChannelRead+0x24>
			break;
	}
	
}
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	0b c0       	rjmp	.+22     	; 0x1b0 <DioChannelRead+0x2e>
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_INPUT_REG;
			break;
		case DIO_PORTB:
			pu8Reg=PORTB_INPUT_REG;
 19a:	c6 e3       	ldi	r28, 0x36	; 54
 19c:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 19e:	08 c0       	rjmp	.+16     	; 0x1b0 <DioChannelRead+0x2e>
		case DIO_PORTC:
			pu8Reg=PORTC_INPUT_REG;
 1a0:	c3 e3       	ldi	r28, 0x33	; 51
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <DioChannelRead+0x2e>
		case DIO_PORTD:
			pu8Reg=PORTD_INPUT_REG;
 1a6:	c0 e3       	ldi	r28, 0x30	; 48
 1a8:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DioChannelRead+0x2e>
}
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_INPUT_REG;
 1ac:	c9 e3       	ldi	r28, 0x39	; 57
 1ae:	d0 e0       	ldi	r29, 0x00	; 0
			pu8Reg=PORTD_INPUT_REG;
			break;
		default:
			break;
	}
	switch(pin){
 1b0:	86 2f       	mov	r24, r22
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	88 30       	cpi	r24, 0x08	; 8
 1b6:	91 05       	cpc	r25, r1
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <DioChannelRead+0x3a>
 1ba:	48 c0       	rjmp	.+144    	; 0x24c <DioChannelRead+0xca>
 1bc:	fc 01       	movw	r30, r24
 1be:	ee 5c       	subi	r30, 0xCE	; 206
 1c0:	ff 4f       	sbci	r31, 0xFF	; 255
 1c2:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__tablejump2__>
		case DIO_PIN0:
			return READ_BIT(*pu8Reg,DIO_PIN0);
 1c6:	88 81       	ld	r24, Y
 1c8:	81 70       	andi	r24, 0x01	; 1
 1ca:	41 c0       	rjmp	.+130    	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN1:
			return READ_BIT(*pu8Reg,DIO_PIN1);
 1cc:	88 81       	ld	r24, Y
 1ce:	82 70       	andi	r24, 0x02	; 2
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	3b c0       	rjmp	.+118    	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN2:
			return READ_BIT(*pu8Reg,DIO_PIN2);
 1d8:	88 81       	ld	r24, Y
 1da:	84 70       	andi	r24, 0x04	; 4
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	96 95       	lsr	r25
 1e0:	87 95       	ror	r24
 1e2:	96 95       	lsr	r25
 1e4:	87 95       	ror	r24
 1e6:	33 c0       	rjmp	.+102    	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN3:
			return READ_BIT(*pu8Reg,DIO_PIN3);
 1e8:	88 81       	ld	r24, Y
 1ea:	88 70       	andi	r24, 0x08	; 8
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	96 95       	lsr	r25
 1f0:	87 95       	ror	r24
 1f2:	96 95       	lsr	r25
 1f4:	87 95       	ror	r24
 1f6:	96 95       	lsr	r25
 1f8:	87 95       	ror	r24
 1fa:	29 c0       	rjmp	.+82     	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN4:
			return READ_BIT(*pu8Reg,DIO_PIN4);
 1fc:	88 81       	ld	r24, Y
 1fe:	80 71       	andi	r24, 0x10	; 16
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	92 95       	swap	r25
 204:	82 95       	swap	r24
 206:	8f 70       	andi	r24, 0x0F	; 15
 208:	89 27       	eor	r24, r25
 20a:	9f 70       	andi	r25, 0x0F	; 15
 20c:	89 27       	eor	r24, r25
 20e:	1f c0       	rjmp	.+62     	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN5:
			return READ_BIT(*pu8Reg,DIO_PIN5);
 210:	88 81       	ld	r24, Y
 212:	80 72       	andi	r24, 0x20	; 32
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	96 95       	lsr	r25
 218:	87 95       	ror	r24
 21a:	92 95       	swap	r25
 21c:	82 95       	swap	r24
 21e:	8f 70       	andi	r24, 0x0F	; 15
 220:	89 27       	eor	r24, r25
 222:	9f 70       	andi	r25, 0x0F	; 15
 224:	89 27       	eor	r24, r25
 226:	13 c0       	rjmp	.+38     	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN6:
			return READ_BIT(*pu8Reg,DIO_PIN6);
 228:	88 81       	ld	r24, Y
 22a:	80 74       	andi	r24, 0x40	; 64
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	00 24       	eor	r0, r0
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	00 1c       	adc	r0, r0
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	00 1c       	adc	r0, r0
 23c:	89 2f       	mov	r24, r25
 23e:	90 2d       	mov	r25, r0
 240:	06 c0       	rjmp	.+12     	; 0x24e <DioChannelRead+0xcc>
			break;
		case DIO_PIN7:
			return READ_BIT(*pu8Reg,DIO_PIN7);
 242:	88 81       	ld	r24, Y
 244:	88 1f       	adc	r24, r24
 246:	88 27       	eor	r24, r24
 248:	88 1f       	adc	r24, r24
 24a:	01 c0       	rjmp	.+2      	; 0x24e <DioChannelRead+0xcc>
			break;
		default:
			return DIO_LOW;
 24c:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
 24e:	df 91       	pop	r29
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <Led_Init>:
			switch(state){
				case LED_ON:
					DioChannelWrite(DIO_PORTD,DIO_PIN3,DIO_HIGH);
					break;
				case LED_OFF:
					DioChannelWrite(DIO_PORTD,DIO_PIN3,DIO_LOW);
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	51 f0       	breq	.+20     	; 0x26c <Led_Init+0x18>
 258:	18 f0       	brcs	.+6      	; 0x260 <Led_Init+0xc>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	69 f0       	breq	.+26     	; 0x278 <Led_Init+0x24>
 25e:	08 95       	ret
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
 26a:	08 95       	ret
 26c:	41 e0       	ldi	r20, 0x01	; 1
 26e:	67 e0       	ldi	r22, 0x07	; 7
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
 276:	08 95       	ret
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	63 e0       	ldi	r22, 0x03	; 3
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
 282:	08 95       	ret

00000284 <Led_Toggle>:
		}
		break;
	}
}
void Led_Toggle(LedEnum_t led){
	switch(led){
 284:	81 30       	cpi	r24, 0x01	; 1
 286:	49 f0       	breq	.+18     	; 0x29a <Led_Toggle+0x16>
 288:	18 f0       	brcs	.+6      	; 0x290 <Led_Toggle+0xc>
 28a:	82 30       	cpi	r24, 0x02	; 2
 28c:	59 f0       	breq	.+22     	; 0x2a4 <Led_Toggle+0x20>
 28e:	08 95       	ret
		case LED_0:
			DioChannelToggle(DIO_PORTC,DIO_PIN2);
 290:	62 e0       	ldi	r22, 0x02	; 2
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0e 94 77 00 	call	0xee	; 0xee <DioChannelToggle>
			break;
 298:	08 95       	ret
		case LED_1:
			DioChannelToggle(DIO_PORTC,DIO_PIN7);
 29a:	67 e0       	ldi	r22, 0x07	; 7
 29c:	82 e0       	ldi	r24, 0x02	; 2
 29e:	0e 94 77 00 	call	0xee	; 0xee <DioChannelToggle>
			break;
 2a2:	08 95       	ret
		case LED_2:
			DioChannelToggle(DIO_PORTD,DIO_PIN3);
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	0e 94 77 00 	call	0xee	; 0xee <DioChannelToggle>
 2ac:	08 95       	ret

000002ae <main>:
#include <util/delay.h>

int main(void)
{
	//initialization
	Led_Init(LED_0);
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 2a 01 	call	0x254	; 0x254 <Led_Init>
	Led_Init(LED_1);
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	0e 94 2a 01 	call	0x254	; 0x254 <Led_Init>
	Led_Init(LED_2);
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	0e 94 2a 01 	call	0x254	; 0x254 <Led_Init>
	Switch_Init(SWITCH_0);
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 99 01 	call	0x332	; 0x332 <Switch_Init>
	Switch_Init(SWITCH_1);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 99 01 	call	0x332	; 0x332 <Switch_Init>
	while (1)
	{
		if (Read_Switch(SWITCH_0))
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	0e 94 b1 01 	call	0x362	; 0x362 <Read_Switch>
 2d2:	88 23       	and	r24, r24
 2d4:	d9 f3       	breq	.-10     	; 0x2cc <main+0x1e>
		{while(1)
			{
			Led_Toggle(LED_0);
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	85 ea       	ldi	r24, 0xA5	; 165
 2e0:	9e e0       	ldi	r25, 0x0E	; 14
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x34>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x3e>
 2ec:	00 00       	nop
			_delay_ms(300);
			Led_Toggle(LED_0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
			Led_Toggle(LED_1);
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	85 ea       	ldi	r24, 0xA5	; 165
 2fe:	9e e0       	ldi	r25, 0x0E	; 14
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <main+0x52>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0x5c>
 30a:	00 00       	nop
			_delay_ms(300);
			Led_Toggle(LED_1);
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
			Led_Toggle(LED_2);
 312:	82 e0       	ldi	r24, 0x02	; 2
 314:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	85 ea       	ldi	r24, 0xA5	; 165
 31c:	9e e0       	ldi	r25, 0x0E	; 14
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <main+0x70>
 326:	00 c0       	rjmp	.+0      	; 0x328 <main+0x7a>
 328:	00 00       	nop
			_delay_ms(300);
			Led_Toggle(LED_2);
 32a:	82 e0       	ldi	r24, 0x02	; 2
 32c:	0e 94 42 01 	call	0x284	; 0x284 <Led_Toggle>
 330:	d2 cf       	rjmp	.-92     	; 0x2d6 <main+0x28>

00000332 <Switch_Init>:
#include "SWITCH_Interface.h"
#include "Dio.h"

void Switch_Init(Switch_t switch_Button){
	switch(switch_Button){
 332:	81 30       	cpi	r24, 0x01	; 1
 334:	51 f0       	breq	.+20     	; 0x34a <Switch_Init+0x18>
 336:	18 f0       	brcs	.+6      	; 0x33e <Switch_Init+0xc>
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	69 f0       	breq	.+26     	; 0x356 <Switch_Init+0x24>
 33c:	08 95       	ret
		case SWITCH_0:
				DioDirectionSet(DIO_PORTB,DIO_PIN0,DIO_INPUT);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	60 e0       	ldi	r22, 0x00	; 0
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
				break;
 348:	08 95       	ret
			case SWITCH_1:
				DioDirectionSet(DIO_PORTD,DIO_PIN6,DIO_INPUT);
 34a:	40 e0       	ldi	r20, 0x00	; 0
 34c:	66 e0       	ldi	r22, 0x06	; 6
 34e:	83 e0       	ldi	r24, 0x03	; 3
 350:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
				break;
 354:	08 95       	ret
			case SWITCH_2:
				DioDirectionSet(DIO_PORTD,DIO_PIN2,DIO_INPUT);
 356:	40 e0       	ldi	r20, 0x00	; 0
 358:	62 e0       	ldi	r22, 0x02	; 2
 35a:	83 e0       	ldi	r24, 0x03	; 3
 35c:	0e 94 46 00 	call	0x8c	; 0x8c <DioDirectionSet>
 360:	08 95       	ret

00000362 <Read_Switch>:
				break;
	}
}
Switch_State_t Read_Switch(Switch_t Switch_Button){
	switch (Switch_Button)
 362:	81 30       	cpi	r24, 0x01	; 1
 364:	49 f0       	breq	.+18     	; 0x378 <Read_Switch+0x16>
 366:	18 f0       	brcs	.+6      	; 0x36e <Read_Switch+0xc>
 368:	82 30       	cpi	r24, 0x02	; 2
 36a:	59 f0       	breq	.+22     	; 0x382 <Read_Switch+0x20>
 36c:	0f c0       	rjmp	.+30     	; 0x38c <Read_Switch+0x2a>
	{
	case SWITCH_0 :
		return DioChannelRead(DIO_PORTB,DIO_PIN0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 c1 00 	call	0x182	; 0x182 <DioChannelRead>
 376:	08 95       	ret
		break;
	case SWITCH_1 :
		return DioChannelRead(DIO_PORTD,DIO_PIN6);
 378:	66 e0       	ldi	r22, 0x06	; 6
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	0e 94 c1 00 	call	0x182	; 0x182 <DioChannelRead>
 380:	08 95       	ret
		break;
	case SWITCH_2 :
		return DioChannelRead(DIO_PORTD,DIO_PIN2);
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	83 e0       	ldi	r24, 0x03	; 3
 386:	0e 94 c1 00 	call	0x182	; 0x182 <DioChannelRead>
 38a:	08 95       	ret
		break;
	}
 38c:	08 95       	ret

0000038e <__tablejump2__>:
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	05 90       	lpm	r0, Z+
 394:	f4 91       	lpm	r31, Z
 396:	e0 2d       	mov	r30, r0
 398:	09 94       	ijmp

0000039a <_exit>:
 39a:	f8 94       	cli

0000039c <__stop_program>:
 39c:	ff cf       	rjmp	.-2      	; 0x39c <__stop_program>
