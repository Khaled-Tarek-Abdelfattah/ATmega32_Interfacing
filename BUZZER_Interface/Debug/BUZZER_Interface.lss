
BUZZER_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c86  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007a5  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d8  00000000  00000000  0000192f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  00001f08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000506  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037f  00000000  00000000  00002512  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002891  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	b0 00       	.word	0x00b0	; ????
  56:	bd 00       	.word	0x00bd	; ????
  58:	ca 00       	.word	0x00ca	; ????
  5a:	d7 00       	.word	0x00d7	; ????
  5c:	e3 00       	.word	0x00e3	; ????
  5e:	ef 00       	.word	0x00ef	; ????
  60:	fb 00       	.word	0x00fb	; ????
  62:	07 01       	movw	r0, r14
  64:	37 01       	movw	r6, r14
  66:	3a 01       	movw	r6, r20
  68:	40 01       	movw	r8, r0
  6a:	48 01       	movw	r8, r16
  6c:	52 01       	movw	r10, r4
  6e:	5c 01       	movw	r10, r24
  70:	68 01       	movw	r12, r16
  72:	75 01       	movw	r14, r10

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61
  80:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  84:	0c 94 cc 01 	jmp	0x398	; 0x398 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <Buzzer_init>:
#include "BUZZER.h"

void Buzzer_init(){
	DioDirectionSet(Buzzer_Port,Buzzer_Pin,DIO_OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	63 e0       	ldi	r22, 0x03	; 3
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 5d 00 	call	0xba	; 0xba <DioDirectionSet>
  96:	08 95       	ret

00000098 <Buzzer_SetState>:
}
void Buzzer_SetState(Dio_PinStateEnum_t state){
	switch(state){
  98:	88 23       	and	r24, r24
  9a:	19 f0       	breq	.+6      	; 0xa2 <Buzzer_SetState+0xa>
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	39 f0       	breq	.+14     	; 0xae <Buzzer_SetState+0x16>
  a0:	08 95       	ret
		case DIO_LOW:
			DioChannelWrite(Buzzer_Port,Buzzer_Pin,DIO_LOW);
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	63 e0       	ldi	r22, 0x03	; 3
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 8e 00 	call	0x11c	; 0x11c <DioChannelWrite>
			break;
  ac:	08 95       	ret
		case DIO_HIGH:
			DioChannelWrite(Buzzer_Port,Buzzer_Pin,DIO_HIGH);
  ae:	41 e0       	ldi	r20, 0x01	; 1
  b0:	63 e0       	ldi	r22, 0x03	; 3
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 8e 00 	call	0x11c	; 0x11c <DioChannelWrite>
  b8:	08 95       	ret

000000ba <DioDirectionSet>:
			break;
		default:
			break;
	}
	
}
  ba:	81 30       	cpi	r24, 0x01	; 1
  bc:	41 f0       	breq	.+16     	; 0xce <DioDirectionSet+0x14>
  be:	80 f0       	brcs	.+32     	; 0xe0 <DioDirectionSet+0x26>
  c0:	82 30       	cpi	r24, 0x02	; 2
  c2:	41 f0       	breq	.+16     	; 0xd4 <DioDirectionSet+0x1a>
  c4:	83 30       	cpi	r24, 0x03	; 3
  c6:	49 f0       	breq	.+18     	; 0xda <DioDirectionSet+0x20>
  c8:	e0 e0       	ldi	r30, 0x00	; 0
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	0b c0       	rjmp	.+22     	; 0xe4 <DioDirectionSet+0x2a>
  ce:	e7 e3       	ldi	r30, 0x37	; 55
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	08 c0       	rjmp	.+16     	; 0xe4 <DioDirectionSet+0x2a>
  d4:	e4 e3       	ldi	r30, 0x34	; 52
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <DioDirectionSet+0x2a>
  da:	e1 e3       	ldi	r30, 0x31	; 49
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DioDirectionSet+0x2a>
  e0:	ea e3       	ldi	r30, 0x3A	; 58
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	44 23       	and	r20, r20
  e6:	19 f0       	breq	.+6      	; 0xee <DioDirectionSet+0x34>
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	69 f0       	breq	.+26     	; 0x106 <DioDirectionSet+0x4c>
  ec:	08 95       	ret
  ee:	20 81       	ld	r18, Z
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DioDirectionSet+0x40>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DioDirectionSet+0x3c>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	80 83       	st	Z, r24
 104:	08 95       	ret
 106:	20 81       	ld	r18, Z
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DioDirectionSet+0x58>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DioDirectionSet+0x54>
 116:	82 2b       	or	r24, r18
 118:	80 83       	st	Z, r24
 11a:	08 95       	ret

0000011c <DioChannelWrite>:
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	41 f0       	breq	.+16     	; 0x134 <DioChannelWrite+0x18>
 124:	80 f0       	brcs	.+32     	; 0x146 <DioChannelWrite+0x2a>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	41 f0       	breq	.+16     	; 0x13a <DioChannelWrite+0x1e>
 12a:	83 30       	cpi	r24, 0x03	; 3
 12c:	49 f0       	breq	.+18     	; 0x140 <DioChannelWrite+0x24>
 12e:	c0 e0       	ldi	r28, 0x00	; 0
 130:	d0 e0       	ldi	r29, 0x00	; 0
 132:	0b c0       	rjmp	.+22     	; 0x14a <DioChannelWrite+0x2e>
 134:	c8 e3       	ldi	r28, 0x38	; 56
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	08 c0       	rjmp	.+16     	; 0x14a <DioChannelWrite+0x2e>
 13a:	c5 e3       	ldi	r28, 0x35	; 53
 13c:	d0 e0       	ldi	r29, 0x00	; 0
 13e:	05 c0       	rjmp	.+10     	; 0x14a <DioChannelWrite+0x2e>
 140:	c2 e3       	ldi	r28, 0x32	; 50
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DioChannelWrite+0x2e>
 146:	cb e3       	ldi	r28, 0x3B	; 59
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	86 2f       	mov	r24, r22
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 30       	cpi	r24, 0x08	; 8
 150:	91 05       	cpc	r25, r1
 152:	08 f0       	brcs	.+2      	; 0x156 <DioChannelWrite+0x3a>
 154:	67 c0       	rjmp	.+206    	; 0x224 <DioChannelWrite+0x108>
 156:	fc 01       	movw	r30, r24
 158:	e6 5d       	subi	r30, 0xD6	; 214
 15a:	ff 4f       	sbci	r31, 0xFF	; 255
 15c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__tablejump2__>
 160:	44 23       	and	r20, r20
 162:	39 f0       	breq	.+14     	; 0x172 <DioChannelWrite+0x56>
 164:	41 30       	cpi	r20, 0x01	; 1
 166:	09 f0       	breq	.+2      	; 0x16a <DioChannelWrite+0x4e>
 168:	5d c0       	rjmp	.+186    	; 0x224 <DioChannelWrite+0x108>
 16a:	88 81       	ld	r24, Y
 16c:	81 60       	ori	r24, 0x01	; 1
 16e:	88 83       	st	Y, r24
 170:	59 c0       	rjmp	.+178    	; 0x224 <DioChannelWrite+0x108>
 172:	88 81       	ld	r24, Y
 174:	8e 7f       	andi	r24, 0xFE	; 254
 176:	88 83       	st	Y, r24
 178:	55 c0       	rjmp	.+170    	; 0x224 <DioChannelWrite+0x108>
 17a:	44 23       	and	r20, r20
 17c:	39 f0       	breq	.+14     	; 0x18c <DioChannelWrite+0x70>
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	09 f0       	breq	.+2      	; 0x184 <DioChannelWrite+0x68>
 182:	50 c0       	rjmp	.+160    	; 0x224 <DioChannelWrite+0x108>
 184:	88 81       	ld	r24, Y
 186:	82 60       	ori	r24, 0x02	; 2
 188:	88 83       	st	Y, r24
 18a:	4c c0       	rjmp	.+152    	; 0x224 <DioChannelWrite+0x108>
 18c:	88 81       	ld	r24, Y
 18e:	8d 7f       	andi	r24, 0xFD	; 253
 190:	88 83       	st	Y, r24
 192:	48 c0       	rjmp	.+144    	; 0x224 <DioChannelWrite+0x108>
 194:	44 23       	and	r20, r20
 196:	39 f0       	breq	.+14     	; 0x1a6 <DioChannelWrite+0x8a>
 198:	41 30       	cpi	r20, 0x01	; 1
 19a:	09 f0       	breq	.+2      	; 0x19e <DioChannelWrite+0x82>
 19c:	43 c0       	rjmp	.+134    	; 0x224 <DioChannelWrite+0x108>
 19e:	88 81       	ld	r24, Y
 1a0:	84 60       	ori	r24, 0x04	; 4
 1a2:	88 83       	st	Y, r24
 1a4:	3f c0       	rjmp	.+126    	; 0x224 <DioChannelWrite+0x108>
 1a6:	88 81       	ld	r24, Y
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	88 83       	st	Y, r24
 1ac:	3b c0       	rjmp	.+118    	; 0x224 <DioChannelWrite+0x108>
 1ae:	44 23       	and	r20, r20
 1b0:	31 f0       	breq	.+12     	; 0x1be <DioChannelWrite+0xa2>
 1b2:	41 30       	cpi	r20, 0x01	; 1
 1b4:	b9 f5       	brne	.+110    	; 0x224 <DioChannelWrite+0x108>
 1b6:	88 81       	ld	r24, Y
 1b8:	88 60       	ori	r24, 0x08	; 8
 1ba:	88 83       	st	Y, r24
 1bc:	33 c0       	rjmp	.+102    	; 0x224 <DioChannelWrite+0x108>
 1be:	88 81       	ld	r24, Y
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	88 83       	st	Y, r24
 1c4:	2f c0       	rjmp	.+94     	; 0x224 <DioChannelWrite+0x108>
 1c6:	44 23       	and	r20, r20
 1c8:	31 f0       	breq	.+12     	; 0x1d6 <DioChannelWrite+0xba>
 1ca:	41 30       	cpi	r20, 0x01	; 1
 1cc:	59 f5       	brne	.+86     	; 0x224 <DioChannelWrite+0x108>
 1ce:	88 81       	ld	r24, Y
 1d0:	80 61       	ori	r24, 0x10	; 16
 1d2:	88 83       	st	Y, r24
 1d4:	27 c0       	rjmp	.+78     	; 0x224 <DioChannelWrite+0x108>
 1d6:	88 81       	ld	r24, Y
 1d8:	8f 7e       	andi	r24, 0xEF	; 239
 1da:	88 83       	st	Y, r24
 1dc:	23 c0       	rjmp	.+70     	; 0x224 <DioChannelWrite+0x108>
 1de:	44 23       	and	r20, r20
 1e0:	31 f0       	breq	.+12     	; 0x1ee <DioChannelWrite+0xd2>
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	f9 f4       	brne	.+62     	; 0x224 <DioChannelWrite+0x108>
 1e6:	88 81       	ld	r24, Y
 1e8:	80 62       	ori	r24, 0x20	; 32
 1ea:	88 83       	st	Y, r24
 1ec:	1b c0       	rjmp	.+54     	; 0x224 <DioChannelWrite+0x108>
 1ee:	88 81       	ld	r24, Y
 1f0:	8f 7d       	andi	r24, 0xDF	; 223
 1f2:	88 83       	st	Y, r24
 1f4:	17 c0       	rjmp	.+46     	; 0x224 <DioChannelWrite+0x108>
 1f6:	44 23       	and	r20, r20
 1f8:	31 f0       	breq	.+12     	; 0x206 <DioChannelWrite+0xea>
 1fa:	41 30       	cpi	r20, 0x01	; 1
 1fc:	99 f4       	brne	.+38     	; 0x224 <DioChannelWrite+0x108>
 1fe:	88 81       	ld	r24, Y
 200:	80 64       	ori	r24, 0x40	; 64
 202:	88 83       	st	Y, r24
 204:	0f c0       	rjmp	.+30     	; 0x224 <DioChannelWrite+0x108>
 206:	88 81       	ld	r24, Y
 208:	8f 7b       	andi	r24, 0xBF	; 191
 20a:	88 83       	st	Y, r24
 20c:	0b c0       	rjmp	.+22     	; 0x224 <DioChannelWrite+0x108>
 20e:	44 23       	and	r20, r20
 210:	31 f0       	breq	.+12     	; 0x21e <DioChannelWrite+0x102>
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	39 f4       	brne	.+14     	; 0x224 <DioChannelWrite+0x108>
 216:	88 81       	ld	r24, Y
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	88 83       	st	Y, r24
 21c:	03 c0       	rjmp	.+6      	; 0x224 <DioChannelWrite+0x108>
 21e:	88 81       	ld	r24, Y
 220:	8f 77       	andi	r24, 0x7F	; 127
 222:	88 83       	st	Y, r24
 224:	df 91       	pop	r29
 226:	cf 91       	pop	r28
 228:	08 95       	ret

0000022a <DioChannelRead>:
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	41 f0       	breq	.+16     	; 0x242 <DioChannelRead+0x18>
 232:	80 f0       	brcs	.+32     	; 0x254 <DioChannelRead+0x2a>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	41 f0       	breq	.+16     	; 0x248 <DioChannelRead+0x1e>
 238:	83 30       	cpi	r24, 0x03	; 3
 23a:	49 f0       	breq	.+18     	; 0x24e <DioChannelRead+0x24>
			break;
	}
	
}
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
 23c:	c0 e0       	ldi	r28, 0x00	; 0
 23e:	d0 e0       	ldi	r29, 0x00	; 0
 240:	0b c0       	rjmp	.+22     	; 0x258 <DioChannelRead+0x2e>
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_INPUT_REG;
			break;
		case DIO_PORTB:
			pu8Reg=PORTB_INPUT_REG;
 242:	c6 e3       	ldi	r28, 0x36	; 54
 244:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 246:	08 c0       	rjmp	.+16     	; 0x258 <DioChannelRead+0x2e>
		case DIO_PORTC:
			pu8Reg=PORTC_INPUT_REG;
 248:	c3 e3       	ldi	r28, 0x33	; 51
 24a:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 24c:	05 c0       	rjmp	.+10     	; 0x258 <DioChannelRead+0x2e>
		case DIO_PORTD:
			pu8Reg=PORTD_INPUT_REG;
 24e:	c0 e3       	ldi	r28, 0x30	; 48
 250:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 252:	02 c0       	rjmp	.+4      	; 0x258 <DioChannelRead+0x2e>
}
Dio_PinStateEnum_t DioChannelRead(Dio_PortEnum_t port,Dio_PinEnum_t pin){
	volatile uint8 *pu8Reg=NULL_PTR;
	switch(port){
		case DIO_PORTA:
			pu8Reg=PORTA_INPUT_REG;
 254:	c9 e3       	ldi	r28, 0x39	; 57
 256:	d0 e0       	ldi	r29, 0x00	; 0
			pu8Reg=PORTD_INPUT_REG;
			break;
		default:
			break;
	}
	switch(pin){
 258:	86 2f       	mov	r24, r22
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	88 30       	cpi	r24, 0x08	; 8
 25e:	91 05       	cpc	r25, r1
 260:	08 f0       	brcs	.+2      	; 0x264 <DioChannelRead+0x3a>
 262:	48 c0       	rjmp	.+144    	; 0x2f4 <DioChannelRead+0xca>
 264:	fc 01       	movw	r30, r24
 266:	ee 5c       	subi	r30, 0xCE	; 206
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__tablejump2__>
		case DIO_PIN0:
			return READ_BIT(*pu8Reg,DIO_PIN0);
 26e:	88 81       	ld	r24, Y
 270:	81 70       	andi	r24, 0x01	; 1
 272:	41 c0       	rjmp	.+130    	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN1:
			return READ_BIT(*pu8Reg,DIO_PIN1);
 274:	88 81       	ld	r24, Y
 276:	82 70       	andi	r24, 0x02	; 2
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	96 95       	lsr	r25
 27c:	87 95       	ror	r24
 27e:	3b c0       	rjmp	.+118    	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN2:
			return READ_BIT(*pu8Reg,DIO_PIN2);
 280:	88 81       	ld	r24, Y
 282:	84 70       	andi	r24, 0x04	; 4
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	96 95       	lsr	r25
 288:	87 95       	ror	r24
 28a:	96 95       	lsr	r25
 28c:	87 95       	ror	r24
 28e:	33 c0       	rjmp	.+102    	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN3:
			return READ_BIT(*pu8Reg,DIO_PIN3);
 290:	88 81       	ld	r24, Y
 292:	88 70       	andi	r24, 0x08	; 8
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	96 95       	lsr	r25
 298:	87 95       	ror	r24
 29a:	96 95       	lsr	r25
 29c:	87 95       	ror	r24
 29e:	96 95       	lsr	r25
 2a0:	87 95       	ror	r24
 2a2:	29 c0       	rjmp	.+82     	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN4:
			return READ_BIT(*pu8Reg,DIO_PIN4);
 2a4:	88 81       	ld	r24, Y
 2a6:	80 71       	andi	r24, 0x10	; 16
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	92 95       	swap	r25
 2ac:	82 95       	swap	r24
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	89 27       	eor	r24, r25
 2b2:	9f 70       	andi	r25, 0x0F	; 15
 2b4:	89 27       	eor	r24, r25
 2b6:	1f c0       	rjmp	.+62     	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN5:
			return READ_BIT(*pu8Reg,DIO_PIN5);
 2b8:	88 81       	ld	r24, Y
 2ba:	80 72       	andi	r24, 0x20	; 32
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	96 95       	lsr	r25
 2c0:	87 95       	ror	r24
 2c2:	92 95       	swap	r25
 2c4:	82 95       	swap	r24
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	89 27       	eor	r24, r25
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 27       	eor	r24, r25
 2ce:	13 c0       	rjmp	.+38     	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN6:
			return READ_BIT(*pu8Reg,DIO_PIN6);
 2d0:	88 81       	ld	r24, Y
 2d2:	80 74       	andi	r24, 0x40	; 64
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	00 24       	eor	r0, r0
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	00 1c       	adc	r0, r0
 2de:	88 0f       	add	r24, r24
 2e0:	99 1f       	adc	r25, r25
 2e2:	00 1c       	adc	r0, r0
 2e4:	89 2f       	mov	r24, r25
 2e6:	90 2d       	mov	r25, r0
 2e8:	06 c0       	rjmp	.+12     	; 0x2f6 <DioChannelRead+0xcc>
			break;
		case DIO_PIN7:
			return READ_BIT(*pu8Reg,DIO_PIN7);
 2ea:	88 81       	ld	r24, Y
 2ec:	88 1f       	adc	r24, r24
 2ee:	88 27       	eor	r24, r24
 2f0:	88 1f       	adc	r24, r24
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <DioChannelRead+0xcc>
			break;
		default:
			return DIO_LOW;
 2f4:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	08 95       	ret

000002fc <main>:
#include "BUZZER.h"
#include "SWITCH_Interface.h"

int main(void)
{
	Switch_Init(SWITCH_0);
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 97 01 	call	0x32e	; 0x32e <Switch_Init>
	Switch_Init(SWITCH_2);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 97 01 	call	0x32e	; 0x32e <Switch_Init>
	Buzzer_init();
 308:	0e 94 46 00 	call	0x8c	; 0x8c <Buzzer_init>
    while (1) 
    {
		if (Read_Switch(SWITCH_0))
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 af 01 	call	0x35e	; 0x35e <Read_Switch>
 312:	88 23       	and	r24, r24
 314:	19 f0       	breq	.+6      	; 0x31c <main+0x20>
		{
			Buzzer_SetState(DIO_HIGH);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 4c 00 	call	0x98	; 0x98 <Buzzer_SetState>
		}
		if(Read_Switch(SWITCH_2))
 31c:	82 e0       	ldi	r24, 0x02	; 2
 31e:	0e 94 af 01 	call	0x35e	; 0x35e <Read_Switch>
 322:	88 23       	and	r24, r24
 324:	99 f3       	breq	.-26     	; 0x30c <main+0x10>
		{
			Buzzer_SetState(DIO_LOW);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 4c 00 	call	0x98	; 0x98 <Buzzer_SetState>
 32c:	ef cf       	rjmp	.-34     	; 0x30c <main+0x10>

0000032e <Switch_Init>:
#include "SWITCH_Interface.h"
#include "Dio.h"

void Switch_Init(Switch_t switch_Button){
	switch(switch_Button){
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	51 f0       	breq	.+20     	; 0x346 <Switch_Init+0x18>
 332:	18 f0       	brcs	.+6      	; 0x33a <Switch_Init+0xc>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	69 f0       	breq	.+26     	; 0x352 <Switch_Init+0x24>
 338:	08 95       	ret
		case SWITCH_0:
				DioDirectionSet(DIO_PORTB,DIO_PIN0,DIO_INPUT);
 33a:	40 e0       	ldi	r20, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 5d 00 	call	0xba	; 0xba <DioDirectionSet>
				break;
 344:	08 95       	ret
			case SWITCH_1:
				DioDirectionSet(DIO_PORTD,DIO_PIN6,DIO_INPUT);
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	66 e0       	ldi	r22, 0x06	; 6
 34a:	83 e0       	ldi	r24, 0x03	; 3
 34c:	0e 94 5d 00 	call	0xba	; 0xba <DioDirectionSet>
				break;
 350:	08 95       	ret
			case SWITCH_2:
				DioDirectionSet(DIO_PORTD,DIO_PIN2,DIO_INPUT);
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	62 e0       	ldi	r22, 0x02	; 2
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	0e 94 5d 00 	call	0xba	; 0xba <DioDirectionSet>
 35c:	08 95       	ret

0000035e <Read_Switch>:
				break;
	}
}
Switch_State_t Read_Switch(Switch_t Switch_Button){
	switch (Switch_Button)
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	49 f0       	breq	.+18     	; 0x374 <Read_Switch+0x16>
 362:	18 f0       	brcs	.+6      	; 0x36a <Read_Switch+0xc>
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	59 f0       	breq	.+22     	; 0x37e <Read_Switch+0x20>
 368:	0f c0       	rjmp	.+30     	; 0x388 <Read_Switch+0x2a>
	{
	case SWITCH_0 :
		return DioChannelRead(DIO_PORTB,DIO_PIN0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	0e 94 15 01 	call	0x22a	; 0x22a <DioChannelRead>
 372:	08 95       	ret
		break;
	case SWITCH_1 :
		return DioChannelRead(DIO_PORTD,DIO_PIN6);
 374:	66 e0       	ldi	r22, 0x06	; 6
 376:	83 e0       	ldi	r24, 0x03	; 3
 378:	0e 94 15 01 	call	0x22a	; 0x22a <DioChannelRead>
 37c:	08 95       	ret
		break;
	case SWITCH_2 :
		return DioChannelRead(DIO_PORTD,DIO_PIN2);
 37e:	62 e0       	ldi	r22, 0x02	; 2
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	0e 94 15 01 	call	0x22a	; 0x22a <DioChannelRead>
 386:	08 95       	ret
		break;
		default:
			return DIO_LOW;
 388:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
 38a:	08 95       	ret

0000038c <__tablejump2__>:
 38c:	ee 0f       	add	r30, r30
 38e:	ff 1f       	adc	r31, r31
 390:	05 90       	lpm	r0, Z+
 392:	f4 91       	lpm	r31, Z
 394:	e0 2d       	mov	r30, r0
 396:	09 94       	ijmp

00000398 <_exit>:
 398:	f8 94       	cli

0000039a <__stop_program>:
 39a:	ff cf       	rjmp	.-2      	; 0x39a <__stop_program>
