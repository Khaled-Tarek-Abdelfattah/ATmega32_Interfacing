
BUZZER_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000406  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000047a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e58  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000063a  00000000  00000000  00001c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000225c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000534  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000398  00000000  00000000  0000287c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   8:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
   c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  10:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  14:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  18:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  20:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  28:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  2c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  30:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  34:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  38:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  3c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  40:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  44:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  48:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  4c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  50:	0c 94 4c 00 	jmp	0x98	; 0x98 <__bad_interrupt>
  54:	93 00       	.word	0x0093	; ????
  56:	a2 00       	.word	0x00a2	; ????
  58:	b1 00       	.word	0x00b1	; ????
  5a:	c0 00       	.word	0x00c0	; ????
  5c:	cf 00       	.word	0x00cf	; ????
  5e:	dd 00       	.word	0x00dd	; ????
  60:	eb 00       	.word	0x00eb	; ????
  62:	f9 00       	.word	0x00f9	; ????
  64:	14 01       	movw	r2, r8
  66:	18 01       	movw	r2, r16
  68:	1f 01       	movw	r2, r30
  6a:	28 01       	movw	r4, r16
  6c:	33 01       	movw	r6, r6
  6e:	3e 01       	movw	r6, r28
  70:	4b 01       	movw	r8, r22
  72:	59 01       	movw	r10, r18

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_clear_bss>:
  80:	20 e0       	ldi	r18, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a1 36       	cpi	r26, 0x61	; 97
  8c:	b2 07       	cpc	r27, r18
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
  94:	0c 94 01 02 	jmp	0x402	; 0x402 <_exit>

00000098 <__bad_interrupt>:
  98:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009c <Buzzer_init>:
#include "BUZZER.h"

void Buzzer_init(){
	DioDirectionSet(BUZZER_DIR_PORT,Buzzer_Pin,DIO_OUTPUT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	63 e0       	ldi	r22, 0x03	; 3
  a0:	8a e3       	ldi	r24, 0x3A	; 58
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 68 00 	call	0xd0	; 0xd0 <DioDirectionSet>
  a8:	08 95       	ret

000000aa <Buzzer_SetState>:
}
void Buzzer_SetState(Dio_PinStateEnum_t state){
	switch(state){
  aa:	88 23       	and	r24, r24
  ac:	19 f0       	breq	.+6      	; 0xb4 <Buzzer_SetState+0xa>
  ae:	81 30       	cpi	r24, 0x01	; 1
  b0:	41 f0       	breq	.+16     	; 0xc2 <Buzzer_SetState+0x18>
  b2:	08 95       	ret
		case DIO_LOW:
			DioChannelWrite(BUZZER_OUTPUT_PORT,Buzzer_Pin,DIO_LOW);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	63 e0       	ldi	r22, 0x03	; 3
  b8:	8b e3       	ldi	r24, 0x3B	; 59
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 86 00 	call	0x10c	; 0x10c <DioChannelWrite>
			break;
  c0:	08 95       	ret
		case DIO_HIGH:
			DioChannelWrite(BUZZER_OUTPUT_PORT,Buzzer_Pin,DIO_HIGH);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	63 e0       	ldi	r22, 0x03	; 3
  c6:	8b e3       	ldi	r24, 0x3B	; 59
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 86 00 	call	0x10c	; 0x10c <DioChannelWrite>
  ce:	08 95       	ret

000000d0 <DioDirectionSet>:
			break;
		case DIO_PIN6:
			TOGGLE_BIT(*port,DIO_PIN6);
			break;
		case DIO_PIN7:
			TOGGLE_BIT(*port,DIO_PIN7);
  d0:	44 23       	and	r20, r20
  d2:	19 f0       	breq	.+6      	; 0xda <DioDirectionSet+0xa>
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	71 f0       	breq	.+28     	; 0xf4 <DioDirectionSet+0x24>
  d8:	08 95       	ret
  da:	fc 01       	movw	r30, r24
  dc:	40 81       	ld	r20, Z
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DioDirectionSet+0x18>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DioDirectionSet+0x14>
  ec:	20 95       	com	r18
  ee:	24 23       	and	r18, r20
  f0:	20 83       	st	Z, r18
  f2:	08 95       	ret
  f4:	fc 01       	movw	r30, r24
  f6:	40 81       	ld	r20, Z
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <DioDirectionSet+0x32>
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	6a 95       	dec	r22
 104:	e2 f7       	brpl	.-8      	; 0xfe <DioDirectionSet+0x2e>
 106:	24 2b       	or	r18, r20
 108:	20 83       	st	Z, r18
 10a:	08 95       	ret

0000010c <DioChannelWrite>:
 10c:	0f 93       	push	r16
 10e:	1f 93       	push	r17
 110:	06 2f       	mov	r16, r22
 112:	10 e0       	ldi	r17, 0x00	; 0
 114:	08 30       	cpi	r16, 0x08	; 8
 116:	11 05       	cpc	r17, r1
 118:	08 f0       	brcs	.+2      	; 0x11c <DioChannelWrite+0x10>
 11a:	78 c0       	rjmp	.+240    	; 0x20c <DioChannelWrite+0x100>
 11c:	f8 01       	movw	r30, r16
 11e:	e6 5d       	subi	r30, 0xD6	; 214
 120:	ff 4f       	sbci	r31, 0xFF	; 255
 122:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__tablejump2__>
 126:	44 23       	and	r20, r20
 128:	41 f0       	breq	.+16     	; 0x13a <DioChannelWrite+0x2e>
 12a:	41 30       	cpi	r20, 0x01	; 1
 12c:	09 f0       	breq	.+2      	; 0x130 <DioChannelWrite+0x24>
 12e:	6e c0       	rjmp	.+220    	; 0x20c <DioChannelWrite+0x100>
 130:	fc 01       	movw	r30, r24
 132:	20 81       	ld	r18, Z
 134:	21 60       	ori	r18, 0x01	; 1
 136:	20 83       	st	Z, r18
 138:	69 c0       	rjmp	.+210    	; 0x20c <DioChannelWrite+0x100>
 13a:	fc 01       	movw	r30, r24
 13c:	20 81       	ld	r18, Z
 13e:	2e 7f       	andi	r18, 0xFE	; 254
 140:	20 83       	st	Z, r18
 142:	64 c0       	rjmp	.+200    	; 0x20c <DioChannelWrite+0x100>
 144:	44 23       	and	r20, r20
 146:	41 f0       	breq	.+16     	; 0x158 <DioChannelWrite+0x4c>
 148:	41 30       	cpi	r20, 0x01	; 1
 14a:	09 f0       	breq	.+2      	; 0x14e <DioChannelWrite+0x42>
 14c:	5f c0       	rjmp	.+190    	; 0x20c <DioChannelWrite+0x100>
 14e:	fc 01       	movw	r30, r24
 150:	20 81       	ld	r18, Z
 152:	22 60       	ori	r18, 0x02	; 2
 154:	20 83       	st	Z, r18
 156:	5a c0       	rjmp	.+180    	; 0x20c <DioChannelWrite+0x100>
 158:	fc 01       	movw	r30, r24
 15a:	20 81       	ld	r18, Z
 15c:	2d 7f       	andi	r18, 0xFD	; 253
 15e:	20 83       	st	Z, r18
 160:	55 c0       	rjmp	.+170    	; 0x20c <DioChannelWrite+0x100>
 162:	44 23       	and	r20, r20
 164:	41 f0       	breq	.+16     	; 0x176 <DioChannelWrite+0x6a>
 166:	41 30       	cpi	r20, 0x01	; 1
 168:	09 f0       	breq	.+2      	; 0x16c <DioChannelWrite+0x60>
 16a:	50 c0       	rjmp	.+160    	; 0x20c <DioChannelWrite+0x100>
 16c:	fc 01       	movw	r30, r24
 16e:	20 81       	ld	r18, Z
 170:	24 60       	ori	r18, 0x04	; 4
 172:	20 83       	st	Z, r18
 174:	4b c0       	rjmp	.+150    	; 0x20c <DioChannelWrite+0x100>
 176:	fc 01       	movw	r30, r24
 178:	20 81       	ld	r18, Z
 17a:	2b 7f       	andi	r18, 0xFB	; 251
 17c:	20 83       	st	Z, r18
 17e:	46 c0       	rjmp	.+140    	; 0x20c <DioChannelWrite+0x100>
 180:	44 23       	and	r20, r20
 182:	41 f0       	breq	.+16     	; 0x194 <DioChannelWrite+0x88>
 184:	41 30       	cpi	r20, 0x01	; 1
 186:	09 f0       	breq	.+2      	; 0x18a <DioChannelWrite+0x7e>
 188:	41 c0       	rjmp	.+130    	; 0x20c <DioChannelWrite+0x100>
 18a:	fc 01       	movw	r30, r24
 18c:	20 81       	ld	r18, Z
 18e:	28 60       	ori	r18, 0x08	; 8
 190:	20 83       	st	Z, r18
 192:	3c c0       	rjmp	.+120    	; 0x20c <DioChannelWrite+0x100>
 194:	fc 01       	movw	r30, r24
 196:	20 81       	ld	r18, Z
 198:	27 7f       	andi	r18, 0xF7	; 247
 19a:	20 83       	st	Z, r18
 19c:	37 c0       	rjmp	.+110    	; 0x20c <DioChannelWrite+0x100>
 19e:	44 23       	and	r20, r20
 1a0:	39 f0       	breq	.+14     	; 0x1b0 <DioChannelWrite+0xa4>
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	99 f5       	brne	.+102    	; 0x20c <DioChannelWrite+0x100>
 1a6:	fc 01       	movw	r30, r24
 1a8:	20 81       	ld	r18, Z
 1aa:	20 61       	ori	r18, 0x10	; 16
 1ac:	20 83       	st	Z, r18
 1ae:	2e c0       	rjmp	.+92     	; 0x20c <DioChannelWrite+0x100>
 1b0:	fc 01       	movw	r30, r24
 1b2:	20 81       	ld	r18, Z
 1b4:	2f 7e       	andi	r18, 0xEF	; 239
 1b6:	20 83       	st	Z, r18
 1b8:	29 c0       	rjmp	.+82     	; 0x20c <DioChannelWrite+0x100>
 1ba:	44 23       	and	r20, r20
 1bc:	39 f0       	breq	.+14     	; 0x1cc <DioChannelWrite+0xc0>
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	29 f5       	brne	.+74     	; 0x20c <DioChannelWrite+0x100>
 1c2:	fc 01       	movw	r30, r24
 1c4:	20 81       	ld	r18, Z
 1c6:	20 62       	ori	r18, 0x20	; 32
 1c8:	20 83       	st	Z, r18
 1ca:	20 c0       	rjmp	.+64     	; 0x20c <DioChannelWrite+0x100>
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 81       	ld	r18, Z
 1d0:	2f 7d       	andi	r18, 0xDF	; 223
 1d2:	20 83       	st	Z, r18
 1d4:	1b c0       	rjmp	.+54     	; 0x20c <DioChannelWrite+0x100>
 1d6:	44 23       	and	r20, r20
 1d8:	39 f0       	breq	.+14     	; 0x1e8 <DioChannelWrite+0xdc>
 1da:	41 30       	cpi	r20, 0x01	; 1
 1dc:	b9 f4       	brne	.+46     	; 0x20c <DioChannelWrite+0x100>
 1de:	fc 01       	movw	r30, r24
 1e0:	20 81       	ld	r18, Z
 1e2:	20 64       	ori	r18, 0x40	; 64
 1e4:	20 83       	st	Z, r18
 1e6:	12 c0       	rjmp	.+36     	; 0x20c <DioChannelWrite+0x100>
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 81       	ld	r18, Z
 1ec:	2f 7b       	andi	r18, 0xBF	; 191
 1ee:	20 83       	st	Z, r18
 1f0:	0d c0       	rjmp	.+26     	; 0x20c <DioChannelWrite+0x100>
 1f2:	44 23       	and	r20, r20
 1f4:	39 f0       	breq	.+14     	; 0x204 <DioChannelWrite+0xf8>
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	49 f4       	brne	.+18     	; 0x20c <DioChannelWrite+0x100>
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 81       	ld	r18, Z
 1fe:	20 68       	ori	r18, 0x80	; 128
 200:	20 83       	st	Z, r18
 202:	04 c0       	rjmp	.+8      	; 0x20c <DioChannelWrite+0x100>
 204:	fc 01       	movw	r30, r24
 206:	20 81       	ld	r18, Z
 208:	2f 77       	andi	r18, 0x7F	; 127
 20a:	20 83       	st	Z, r18
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <DioChannelRead>:
			break;
	}
	
}
Dio_PinStateEnum_t DioChannelRead(volatile uint8 * port,Dio_PinEnum_t pin){
	switch(pin){
 212:	46 2f       	mov	r20, r22
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	48 30       	cpi	r20, 0x08	; 8
 218:	51 05       	cpc	r21, r1
 21a:	08 f0       	brcs	.+2      	; 0x21e <DioChannelRead+0xc>
 21c:	50 c0       	rjmp	.+160    	; 0x2be <DioChannelRead+0xac>
 21e:	fa 01       	movw	r30, r20
 220:	ee 5c       	subi	r30, 0xCE	; 206
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__tablejump2__>
		case DIO_PIN0:
			return READ_BIT(*port,DIO_PIN0);
 228:	fc 01       	movw	r30, r24
 22a:	80 81       	ld	r24, Z
 22c:	81 70       	andi	r24, 0x01	; 1
 22e:	08 95       	ret
			break;
		case DIO_PIN1:
			return READ_BIT(*port,DIO_PIN1);
 230:	fc 01       	movw	r30, r24
 232:	80 81       	ld	r24, Z
 234:	82 70       	andi	r24, 0x02	; 2
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	96 95       	lsr	r25
 23a:	87 95       	ror	r24
 23c:	08 95       	ret
			break;
		case DIO_PIN2:
			return READ_BIT(*port,DIO_PIN2);
 23e:	fc 01       	movw	r30, r24
 240:	80 81       	ld	r24, Z
 242:	84 70       	andi	r24, 0x04	; 4
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	96 95       	lsr	r25
 24c:	87 95       	ror	r24
 24e:	08 95       	ret
			break;
		case DIO_PIN3:
			return READ_BIT(*port,DIO_PIN3);
 250:	fc 01       	movw	r30, r24
 252:	80 81       	ld	r24, Z
 254:	88 70       	andi	r24, 0x08	; 8
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	96 95       	lsr	r25
 25a:	87 95       	ror	r24
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	08 95       	ret
			break;
		case DIO_PIN4:
			return READ_BIT(*port,DIO_PIN4);
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	80 71       	andi	r24, 0x10	; 16
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	92 95       	swap	r25
 270:	82 95       	swap	r24
 272:	8f 70       	andi	r24, 0x0F	; 15
 274:	89 27       	eor	r24, r25
 276:	9f 70       	andi	r25, 0x0F	; 15
 278:	89 27       	eor	r24, r25
 27a:	08 95       	ret
			break;
		case DIO_PIN5:
			return READ_BIT(*port,DIO_PIN5);
 27c:	fc 01       	movw	r30, r24
 27e:	80 81       	ld	r24, Z
 280:	80 72       	andi	r24, 0x20	; 32
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	96 95       	lsr	r25
 286:	87 95       	ror	r24
 288:	92 95       	swap	r25
 28a:	82 95       	swap	r24
 28c:	8f 70       	andi	r24, 0x0F	; 15
 28e:	89 27       	eor	r24, r25
 290:	9f 70       	andi	r25, 0x0F	; 15
 292:	89 27       	eor	r24, r25
 294:	08 95       	ret
			break;
		case DIO_PIN6:
			return READ_BIT(*port,DIO_PIN6);
 296:	fc 01       	movw	r30, r24
 298:	80 81       	ld	r24, Z
 29a:	80 74       	andi	r24, 0x40	; 64
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	00 24       	eor	r0, r0
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	00 1c       	adc	r0, r0
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	00 1c       	adc	r0, r0
 2ac:	89 2f       	mov	r24, r25
 2ae:	90 2d       	mov	r25, r0
 2b0:	08 95       	ret
			break;
		case DIO_PIN7:
			return READ_BIT(*port,DIO_PIN7);
 2b2:	fc 01       	movw	r30, r24
 2b4:	80 81       	ld	r24, Z
 2b6:	88 1f       	adc	r24, r24
 2b8:	88 27       	eor	r24, r24
 2ba:	88 1f       	adc	r24, r24
 2bc:	08 95       	ret
			break;
		default:
			return DIO_LOW;
 2be:	80 e0       	ldi	r24, 0x00	; 0
			break;
	}
 2c0:	08 95       	ret

000002c2 <main>:
#include "BUZZER.h"
#include "SWITCH_Interface.h"

int main(void)
{
	Switch_Init(SWITCH_0);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Switch_Init>
	Switch_Init(SWITCH_2);
 2c8:	82 e0       	ldi	r24, 0x02	; 2
 2ca:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <Switch_Init>
	Buzzer_init();
 2ce:	0e 94 4e 00 	call	0x9c	; 0x9c <Buzzer_init>
    while (1) 
    {
		if (Read_Switch(SWITCH_0))
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 95 01 	call	0x32a	; 0x32a <Read_Switch>
 2d8:	88 23       	and	r24, r24
 2da:	19 f0       	breq	.+6      	; 0x2e2 <main+0x20>
		{
			Buzzer_SetState(DIO_HIGH);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 55 00 	call	0xaa	; 0xaa <Buzzer_SetState>
		}
		if(Read_Switch(SWITCH_2))
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	0e 94 95 01 	call	0x32a	; 0x32a <Read_Switch>
 2e8:	88 23       	and	r24, r24
 2ea:	99 f3       	breq	.-26     	; 0x2d2 <main+0x10>
		{
			Buzzer_SetState(DIO_LOW);
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 55 00 	call	0xaa	; 0xaa <Buzzer_SetState>
 2f2:	ef cf       	rjmp	.-34     	; 0x2d2 <main+0x10>

000002f4 <Switch_Init>:
#define DEBOUNCE_PERIOD (20U)

Dio_PinStateEnum_t sw_PrevState = DIO_LOW;

void Switch_Init(Switch_t switch_Button){
	switch(switch_Button){
 2f4:	81 30       	cpi	r24, 0x01	; 1
 2f6:	59 f0       	breq	.+22     	; 0x30e <Switch_Init+0x1a>
 2f8:	18 f0       	brcs	.+6      	; 0x300 <Switch_Init+0xc>
 2fa:	82 30       	cpi	r24, 0x02	; 2
 2fc:	79 f0       	breq	.+30     	; 0x31c <Switch_Init+0x28>
 2fe:	08 95       	ret
		case SWITCH_0:
				DioDirectionSet(PORTB_DIR_REG,DIO_PIN0,DIO_INPUT);
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	87 e3       	ldi	r24, 0x37	; 55
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 68 00 	call	0xd0	; 0xd0 <DioDirectionSet>
				break;
 30c:	08 95       	ret
			case SWITCH_1:
				DioDirectionSet(PORTD_DIR_REG,DIO_PIN6,DIO_INPUT);
 30e:	40 e0       	ldi	r20, 0x00	; 0
 310:	66 e0       	ldi	r22, 0x06	; 6
 312:	81 e3       	ldi	r24, 0x31	; 49
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 68 00 	call	0xd0	; 0xd0 <DioDirectionSet>
				break;
 31a:	08 95       	ret
			case SWITCH_2:
				DioDirectionSet(PORTD_DIR_REG,DIO_PIN2,DIO_INPUT);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	62 e0       	ldi	r22, 0x02	; 2
 320:	81 e3       	ldi	r24, 0x31	; 49
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 68 00 	call	0xd0	; 0xd0 <DioDirectionSet>
 328:	08 95       	ret

0000032a <Read_Switch>:
				break;
	}
}
Switch_State_t Read_Switch(Switch_t Switch_Button){
	Switch_State_t localSwitchState = SWITCH_REALEASED;
	switch (Switch_Button)
 32a:	81 30       	cpi	r24, 0x01	; 1
 32c:	21 f1       	breq	.+72     	; 0x376 <Read_Switch+0x4c>
 32e:	20 f0       	brcs	.+8      	; 0x338 <Read_Switch+0xe>
 330:	82 30       	cpi	r24, 0x02	; 2
 332:	09 f4       	brne	.+2      	; 0x336 <Read_Switch+0xc>
 334:	3f c0       	rjmp	.+126    	; 0x3b4 <Read_Switch+0x8a>
 336:	5d c0       	rjmp	.+186    	; 0x3f2 <Read_Switch+0xc8>
	{
	case SWITCH_0 :
		if (sw_PrevState != DioChannelRead(PORTB_INPUT_REG,DIO_PIN0))
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	86 e3       	ldi	r24, 0x36	; 54
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 342:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 346:	89 17       	cp	r24, r25
 348:	81 f0       	breq	.+32     	; 0x36a <Read_Switch+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	2f ef       	ldi	r18, 0xFF	; 255
 34c:	89 ef       	ldi	r24, 0xF9	; 249
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	21 50       	subi	r18, 0x01	; 1
 352:	80 40       	sbci	r24, 0x00	; 0
 354:	90 40       	sbci	r25, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <Read_Switch+0x26>
 358:	00 c0       	rjmp	.+0      	; 0x35a <Read_Switch+0x30>
 35a:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_PERIOD);
			sw_PrevState = DioChannelRead(PORTB_INPUT_REG,DIO_PIN0);
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	86 e3       	ldi	r24, 0x36	; 54
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 366:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		localSwitchState = DioChannelRead(PORTB_INPUT_REG,DIO_PIN0);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	86 e3       	ldi	r24, 0x36	; 54
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
		return localSwitchState;
 374:	08 95       	ret
		break;
	case SWITCH_1 :
		if (sw_PrevState != DioChannelRead(PORTD_INPUT_REG,DIO_PIN6))
 376:	66 e0       	ldi	r22, 0x06	; 6
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 380:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 384:	89 17       	cp	r24, r25
 386:	81 f0       	breq	.+32     	; 0x3a8 <Read_Switch+0x7e>
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	89 ef       	ldi	r24, 0xF9	; 249
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <Read_Switch+0x64>
 396:	00 c0       	rjmp	.+0      	; 0x398 <Read_Switch+0x6e>
 398:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_PERIOD);
			sw_PrevState = DioChannelRead(PORTD_INPUT_REG,DIO_PIN6);
 39a:	66 e0       	ldi	r22, 0x06	; 6
 39c:	80 e3       	ldi	r24, 0x30	; 48
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 3a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		localSwitchState = DioChannelRead(PORTD_INPUT_REG,DIO_PIN6);
 3a8:	66 e0       	ldi	r22, 0x06	; 6
 3aa:	80 e3       	ldi	r24, 0x30	; 48
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
		return localSwitchState;
 3b2:	08 95       	ret
		break;
	case SWITCH_2 :
		if (sw_PrevState != DioChannelRead(PORTD_INPUT_REG,DIO_PIN2))
 3b4:	62 e0       	ldi	r22, 0x02	; 2
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 3be:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3c2:	89 17       	cp	r24, r25
 3c4:	81 f0       	breq	.+32     	; 0x3e6 <Read_Switch+0xbc>
 3c6:	2f ef       	ldi	r18, 0xFF	; 255
 3c8:	89 ef       	ldi	r24, 0xF9	; 249
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	21 50       	subi	r18, 0x01	; 1
 3ce:	80 40       	sbci	r24, 0x00	; 0
 3d0:	90 40       	sbci	r25, 0x00	; 0
 3d2:	e1 f7       	brne	.-8      	; 0x3cc <Read_Switch+0xa2>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <Read_Switch+0xac>
 3d6:	00 00       	nop
		{
			_delay_ms(DEBOUNCE_PERIOD);
			sw_PrevState = DioChannelRead(PORTD_INPUT_REG,DIO_PIN2);
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	80 e3       	ldi	r24, 0x30	; 48
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
 3e2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		localSwitchState = DioChannelRead(PORTD_INPUT_REG,DIO_PIN2);
 3e6:	62 e0       	ldi	r22, 0x02	; 2
 3e8:	80 e3       	ldi	r24, 0x30	; 48
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 09 01 	call	0x212	; 0x212 <DioChannelRead>
		return localSwitchState;
 3f0:	08 95       	ret
		break;
	default:
		return localSwitchState;
 3f2:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
 3f4:	08 95       	ret

000003f6 <__tablejump2__>:
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	05 90       	lpm	r0, Z+
 3fc:	f4 91       	lpm	r31, Z
 3fe:	e0 2d       	mov	r30, r0
 400:	09 94       	ijmp

00000402 <_exit>:
 402:	f8 94       	cli

00000404 <__stop_program>:
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
